; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--debug -c --asm -ogames.o --depend=games.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=games.crf GAMES\GAMES.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

rand_number PROC
        LDR      r1,|L1.1020|
        LDR      r1,[r1,#0x14]
        LSR      r0,r1,#10
        LDR      r1,|L1.1024|
        LDR      r2,|L1.1028|
        LDRH     r2,[r2,#0]  ; rand_seed
        LDRB     r1,[r1,r2]
        LDR      r2,|L1.1028|
        LDRH     r2,[r2,#0]  ; rand_seed
        ADD      r1,r1,r2
        LDR      r2,|L1.1028|
        LDRH     r2,[r2,#0]  ; rand_seed
        LDR      r3,|L1.1028|
        LDRH     r3,[r3,#0]  ; rand_seed
        MLA      r1,r2,r3,r1
        ADD      r0,r0,r1
        LDR      r1,|L1.1028|
        LDRH     r1,[r1,#0]  ; rand_seed
        ADD      r1,r1,#1
        LDR      r2,|L1.1028|
        STRH     r1,[r2,#0]
        BX       lr
        ENDP

hitTest PROC
        PUSH     {r0-r7,lr}
        MOV      r0,#0
        MOV      r1,r0
        B        |L1.178|
|L1.60|
        MOV      r4,r1
        ADD      r5,r1,r4,LSR #31
        ASR      r5,r5,#1
        SUB      r5,r1,r5,LSL #1
        LDRH     r6,[sp,#4]
        LDRH     r7,[sp,#0]
        MLA      r5,r5,r6,r7
        UXTH     r2,r5
        ADD      r4,r1,#1
        MOV      r5,#3
        SDIV     r4,r4,r5
        LDRH     r5,[sp,#6]
        LDRH     r6,[sp,#2]
        MLA      r4,r4,r5,r6
        UXTH     r3,r4
        LDRH     r4,[sp,#8]
        CMP      r4,r2
        BGT      |L1.172|
        LDRH     r4,[sp,#8]
        LDRH     r5,[sp,#0xc]
        ADD      r4,r4,r5
        CMP      r4,r2
        BLT      |L1.172|
        LDRH     r4,[sp,#0xa]
        CMP      r4,r3
        BGT      |L1.172|
        LDRH     r4,[sp,#0xa]
        LDRH     r5,[sp,#0xe]
        ADD      r4,r4,r5
        CMP      r4,r3
        BLT      |L1.172|
        MOV      r4,#1
        LSL      r4,r4,r1
        ORR      r4,r4,r0
        UXTB     r0,r4
|L1.172|
        ADD      r4,r1,#1
        UXTB     r1,r4
|L1.178|
        CMP      r1,#4
        BLT      |L1.60|
        ADD      sp,sp,#0x10
        POP      {r4-r7,pc}
        ENDP

init_PONG PROC
        PUSH     {r4,lr}
        MOV      r0,#0x2222
        LDR      r1,|L1.1032|
        STRH     r0,[r1,#0]
        MOV      r0,r1
        LDRH     r0,[r0,#0]  ; bgColor
        BL       LCD_Clear
        MOV      r0,#0
        LDR      r1,|L1.1036|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.1040|
        STRH     r0,[r1,#0]
        LDR      r1,|L1.1044|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.1048|
        STRB     r0,[r1,#0]
        MOV      r0,#0xc
        LDR      r1,|L1.1052|
        STRH     r0,[r1,#4]
        STRH     r0,[r1,#6]
        LDRH     r0,[r1,#4]  ; ball
        ADD      r1,r0,r0,LSR #31
        ASR      r1,r1,#1
        RSB      r1,r1,#0xa0
        LDR      r2,|L1.1052|
        STRH     r1,[r2,#0]
        MOV      r1,r2
        LDRH     r0,[r1,#6]  ; ball
        ADD      r1,r0,r0,LSR #31
        ASR      r1,r1,#1
        RSB      r1,r1,#0x78
        STRH     r1,[r2,#2]
        MOV      r0,#0xf
        LDR      r1,|L1.1056|
        STRH     r0,[r1,#4]
        MOV      r0,#0x3c
        STRH     r0,[r1,#6]
        MOV      r0,#0x28
        STRH     r0,[r1,#0]
        MOV      r0,#0xf
        LDR      r1,|L1.1060|
        STRH     r0,[r1,#4]
        MOV      r0,#0x3c
        STRH     r0,[r1,#6]
        MOV      r0,#0x10e
        STRH     r0,[r1,#0]
        POP      {r4,pc}
        ENDP

PONG PROC
        PUSH     {r0-r12,lr}
        LDR      r0,|L1.1064|
        LDRB     r0,[r0,#0]  ; newGame
        CMP      r0,#1
        BNE      |L1.336|
        BL       init_PONG
        MOV      r0,#0
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
|L1.336|
        LDR      r1,|L1.1068|
        LDR      r0,|L1.1044|
        LDRB     r0,[r0,#0]  ; score1
        BL       conversor_IaS
        MOV      r0,#0xffff
        MOVS     r3,#0
        LDR      r2,|L1.1068|
        MOVS     r1,#0x14
        STR      r0,[sp,#0]
        MOVS     r0,#0x8c
        BL       GUI_Text
        LDR      r1,|L1.1068|
        LDR      r0,|L1.1048|
        LDRB     r0,[r0,#0]  ; score2
        BL       conversor_IaS
        MOV      r0,#0xffff
        MOVS     r3,#0
        LDR      r2,|L1.1068|
        MOVS     r1,#0x14
        STR      r0,[sp,#0]
        MOVS     r0,#0xb4
        BL       GUI_Text
        MOVS     r0,#0
        MOVS     r3,#0xef
        MOVS     r2,#0xa0
        MOV      r1,r0
        STR      r0,[sp,#0]
        MOV      r0,r2
        BL       LCD_DrawLine
        LDR      r0,|L1.1032|
        LDRH     r0,[r0,#0]  ; bgColor
        LDR      r4,|L1.1056|
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]  ; pl1
        LDRH     r2,[r4,#4]  ; pl1
        LDRH     r1,[r4,#2]  ; pl1
        LDRH     r0,[r4,#0]  ; pl1
        BL       DrawRectangle
        LDR      r0,|L1.1032|
        LDRH     r0,[r0,#0]  ; bgColor
        LDR      r4,|L1.1060|
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]  ; pl2
        LDRH     r2,[r4,#4]  ; pl2
        LDRH     r1,[r4,#2]  ; pl2
        LDRH     r0,[r4,#0]  ; pl2
        BL       DrawRectangle
        LDR      r0,|L1.1032|
        LDRH     r0,[r0,#0]  ; bgColor
        LDR      r4,|L1.1052|
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]  ; ball
        LDRH     r2,[r4,#4]  ; ball
        LDRH     r1,[r4,#2]  ; ball
        LDRH     r0,[r4,#0]  ; ball
        BL       DrawRectangle
        LDR      r0,|L1.1036|
        LDRB     r0,[r0,#0]  ; time_pong
        BL       __aeabi_ui2f
        MOV      r11,r0
        LDR      r1,|L1.1072|
        BL       __aeabi_fdiv
        MOV      r10,r0
        BL       __aeabi_f2d
        MOVS     r2,#0
        LDR      r3,|L1.1076|
        STRD     r0,r1,[sp,#8]
        BL       __aeabi_dadd
        MOV      r6,r0
        MOV      r7,r1
        LDR      r0,|L1.1080|
        LDR      r0,[r0,#0]  ; vel_x
        BL       __aeabi_i2d
        MOV      r8,r0
        MOV      r2,r6
        MOV      r3,r7
        BL       __aeabi_dmul
        MOV      r4,r0
        BL       __aeabi_d2iz
        LDR      r1,|L1.1084|
        STR      r0,[r1,#0]  ; desp_x
        LDR      r0,|L1.1036|
        LDRB     r0,[r0,#0]  ; time_pong
        BL       __aeabi_ui2f
        LDR      r1,|L1.1072|
        STR      r0,[sp,#8]
        BL       __aeabi_fdiv
        STR      r0,[sp,#0xc]
        BL       __aeabi_f2d
        MOV      r6,r0
        MOVS     r2,#0
        LDR      r3,|L1.1076|
        BL       __aeabi_dadd
        MOV      r4,r0
        MOV      r5,r1
        LDR      r0,|L1.1088|
        LDR      r0,[r0,#0]  ; vel_y
        BL       __aeabi_i2d
        MOV      r8,r0
        MOV      r2,r4
        MOV      r3,r5
        BL       __aeabi_dmul
        MOV      r10,r0
        BL       __aeabi_d2iz
        LDR      r1,|L1.1092|
        STR      r0,[r1,#0]  ; desp_y
        LDR      r0,|L1.1052|
        LDRH     r0,[r0,#2]  ; ball
        LDR      r1,[r1,#0]  ; desp_y
        ADDS     r0,r0,r1
        BPL      |L1.618|
        MOV      r0,#0
        LDR      r1,|L1.1052|
        STRH     r0,[r1,#2]
        B        |L1.632|
|L1.618|
        LDR      r0,|L1.1052|
        LDRH     r0,[r0,#2]  ; ball
        LDR      r1,|L1.1092|
        LDR      r1,[r1,#0]  ; desp_y
        ADD      r0,r0,r1
        LDR      r1,|L1.1052|
        STRH     r0,[r1,#2]
|L1.632|
        LDR      r0,|L1.1052|
        LDRH     r0,[r0,#0]  ; ball
        LDR      r1,|L1.1084|
        LDR      r1,[r1,#0]  ; desp_x
        ADDS     r0,r0,r1
        BPL      |L1.654|
        MOV      r0,#0
        LDR      r1,|L1.1052|
        STRH     r0,[r1,#0]
        B        |L1.668|
|L1.654|
        LDR      r0,|L1.1052|
        LDRH     r0,[r0,#0]  ; ball
        LDR      r1,|L1.1084|
        LDR      r1,[r1,#0]  ; desp_x
        ADD      r0,r0,r1
        LDR      r1,|L1.1052|
        STRH     r0,[r1,#0]
|L1.668|
        LDR      r1,|L1.1056|
        LDRH     r0,[r1,#6]  ; pl1
        ADD      r1,r0,r0,LSR #31
        ASRS     r1,r1,#1
        ADDS     r1,r1,#1
        LDR      r2,|L1.1096|
        LDRH     r2,[r2,#0]  ; player1_y
        SUBS     r1,r2,r1
        CMP      r1,#0
        BLE      |L1.720|
        LDR      r1,|L1.1056|
        LDRH     r0,[r1,#6]  ; pl1
        ADD      r1,r0,r0,LSR #31
        ASR      r1,r1,#1
        ADD      r1,r1,#1
        LDR      r2,|L1.1096|
        LDRH     r2,[r2,#0]  ; player1_y
        SUB      r1,r2,r1
        LDR      r2,|L1.1056|
        STRH     r1,[r2,#2]
        B        |L1.728|
|L1.720|
        MOV      r0,#1
        LDR      r1,|L1.1056|
        STRH     r0,[r1,#2]
|L1.728|
        LDR      r1,|L1.1060|
        LDRH     r0,[r1,#6]  ; pl2
        ADD      r1,r0,r0,LSR #31
        ASRS     r1,r1,#1
        ADDS     r1,r1,#1
        LDR      r2,|L1.1100|
        LDRH     r2,[r2,#0]  ; player2_y
        SUBS     r1,r2,r1
        CMP      r1,#0
        BLE      |L1.780|
        LDR      r1,|L1.1060|
        LDRH     r0,[r1,#6]  ; pl2
        ADD      r1,r0,r0,LSR #31
        ASR      r1,r1,#1
        ADD      r1,r1,#1
        LDR      r2,|L1.1100|
        LDRH     r2,[r2,#0]  ; player2_y
        SUB      r1,r2,r1
        LDR      r2,|L1.1060|
        STRH     r1,[r2,#2]
        B        |L1.788|
|L1.780|
        MOV      r0,#1
        LDR      r1,|L1.1060|
        STRH     r0,[r1,#2]
|L1.788|
        LDR      r0,|L1.1060|
        LDR      r1,[r0,#0]  ; pl2
        STR      r1,[sp,#8]
        LDR      r0,[r0,#4]  ; pl2
        STR      r0,[sp,#0xc]
        LDR      r0,|L1.1052|
        LDR      r1,[r0,#0]  ; ball
        STR      r1,[sp,#0]
        LDR      r0,[r0,#4]  ; ball
        STR      r0,[sp,#4]
        MOV      r1,r0
        LDRD     r2,r3,[sp,#8]
        LDR      r0,[sp,#0]
        BL       hitTest
        CBZ      r0,|L1.896|
        LDR      r0,|L1.1104|
        LDRB     r0,[r0,#0]  ; vel_x_base
        RSB      r0,r0,#0
        LDR      r1,|L1.1080|
        STR      r0,[r1,#0]  ; vel_x
        LDR      r2,|L1.1052|
        LDRH     r1,[r2,#6]  ; ball
        ADD      r2,r1,r1,LSR #31
        LDR      r3,|L1.1052|
        LDRH     r3,[r3,#2]  ; ball
        ADD      r2,r3,r2,ASR #1
        LDR      r3,|L1.1060|
        LDRH     r0,[r3,#6]  ; pl2
        ADD      r3,r0,r0,LSR #31
        LDR      r4,|L1.1060|
        LDRH     r4,[r4,#2]  ; pl2
        ADD      r3,r4,r3,ASR #1
        SUB      r2,r2,r3
        LDR      r3,|L1.1108|
        LDRB     r3,[r3,#0]  ; vel_y_base
        SDIV     r2,r2,r3
        LDR      r3,|L1.1088|
        STR      r2,[r3,#0]  ; vel_y
        MOV      r2,#0xad0
        LDR      r1,|L1.1112|
        MOV      r0,#0
        BL       DMA_DAC_audio_Channel_Init
|L1.896|
        LDR      r0,|L1.1056|
        LDR      r1,[r0,#0]  ; pl1
        STR      r1,[sp,#8]
        LDR      r0,[r0,#4]  ; pl1
        STR      r0,[sp,#0xc]
        LDR      r0,|L1.1052|
        LDR      r1,[r0,#0]  ; ball
        STR      r1,[sp,#0]
        LDR      r0,[r0,#4]  ; ball
        STR      r0,[sp,#4]
        MOV      r1,r0
        LDRD     r2,r3,[sp,#8]
        LDR      r0,[sp,#0]
        BL       hitTest
        CBZ      r0,|L1.1000|
        LDR      r0,|L1.1104|
        LDRB     r0,[r0,#0]  ; vel_x_base
        LDR      r1,|L1.1080|
        STR      r0,[r1,#0]  ; vel_x
        LDR      r2,|L1.1052|
        LDRH     r1,[r2,#6]  ; ball
        ADD      r2,r1,r1,LSR #31
        LDR      r3,|L1.1052|
        LDRH     r3,[r3,#2]  ; ball
        ADD      r2,r3,r2,ASR #1
        LDR      r3,|L1.1056|
        LDRH     r0,[r3,#6]  ; pl1
        ADD      r3,r0,r0,LSR #31
        LDR      r4,|L1.1056|
        LDRH     r4,[r4,#2]  ; pl1
        ADD      r3,r4,r3,ASR #1
        SUB      r2,r2,r3
        LDR      r3,|L1.1108|
        LDRB     r3,[r3,#0]  ; vel_y_base
        SDIV     r2,r2,r3
        LDR      r3,|L1.1088|
        STR      r2,[r3,#0]  ; vel_y
        MOV      r2,#0xad0
        LDR      r1,|L1.1112|
        MOV      r0,#0
        BL       DMA_DAC_audio_Channel_Init
|L1.1000|
        LDR      r0,|L1.1052|
        LDRH     r0,[r0,#0]  ; ball
        LDR      r1,|L1.1116|
        LDRB     r1,[r1,#0]  ; border_field
        CMP      r0,r1
        BGE      |L1.1190|
        LDR      r0,|L1.1104|
        LDRB     r0,[r0,#0]  ; vel_x_base
        LDR      r1,|L1.1080|
        B        |L1.1120|
|L1.1020|
        DCD      0x2009c000
|L1.1024|
        DCD      caramels
|L1.1028|
        DCD      rand_seed
|L1.1032|
        DCD      bgColor
|L1.1036|
        DCD      time_pong
|L1.1040|
        DCD      time_game
|L1.1044|
        DCD      score1
|L1.1048|
        DCD      score2
|L1.1052|
        DCD      ball
|L1.1056|
        DCD      pl1
|L1.1060|
        DCD      pl2
|L1.1064|
        DCD      newGame
|L1.1068|
        DCD      delay_read
|L1.1072|
        DCD      0x41200000
|L1.1076|
        DCD      0x3ff00000
|L1.1080|
        DCD      vel_x
|L1.1084|
        DCD      desp_x
|L1.1088|
        DCD      vel_y
|L1.1092|
        DCD      desp_y
|L1.1096|
        DCD      player1_y
|L1.1100|
        DCD      player2_y
|L1.1104|
        DCD      vel_x_base
|L1.1108|
        DCD      vel_y_base
|L1.1112|
        DCD      muelle
|L1.1116|
        DCD      border_field
|L1.1120|
        STR      r0,[r1,#0]  ; vel_x
        MOV      r0,#0
        LDR      r1,|L1.2144|
        STR      r0,[r1,#0]  ; vel_y
        LDR      r1,|L1.2148|
        LDRH     r0,[r1,#4]  ; ball
        ADD      r1,r0,r0,LSR #31
        ASR      r1,r1,#1
        RSB      r1,r1,#0xa0
        LDR      r2,|L1.2148|
        STRH     r1,[r2,#0]
        MOV      r1,r2
        LDRH     r0,[r1,#6]  ; ball
        ADD      r1,r0,r0,LSR #31
        ASR      r1,r1,#1
        RSB      r1,r1,#0x78
        STRH     r1,[r2,#2]
        LDR      r0,|L1.2152|
        LDRB     r0,[r0,#0]  ; score2
        ADD      r0,r0,#1
        LDR      r1,|L1.2152|
        STRB     r0,[r1,#0]
        MOV      r0,#0
        LDR      r1,|L1.2156|
        STRB     r0,[r1,#0]
        B        |L1.1292|
|L1.1190|
        LDR      r0,|L1.2148|
        LDRH     r1,[r0,#0]  ; ball
        LDRH     r0,[r0,#4]  ; ball
        ADDS     r0,r0,#1
        LDR      r2,|L1.2160|
        LDRB     r2,[r2,#0]  ; border_field
        ADD      r0,r0,r2
        LDR      r2,|L1.2164|
        LDRH     r2,[r2,#0]  ; MAX_X
        SUBS     r0,r2,r0
        CMP      r1,r0
        BLE      |L1.1292|
        LDR      r0,|L1.2168|
        LDRB     r0,[r0,#0]  ; vel_x_base
        RSB      r0,r0,#0
        LDR      r1,|L1.2172|
        STR      r0,[r1,#0]  ; vel_x
        MOV      r0,#0
        LDR      r1,|L1.2144|
        STR      r0,[r1,#0]  ; vel_y
        LDR      r1,|L1.2148|
        LDRH     r0,[r1,#4]  ; ball
        ADD      r1,r0,r0,LSR #31
        ASR      r1,r1,#1
        RSB      r1,r1,#0xa0
        LDR      r2,|L1.2148|
        STRH     r1,[r2,#0]
        MOV      r1,r2
        LDRH     r0,[r1,#6]  ; ball
        ADD      r1,r0,r0,LSR #31
        ASR      r1,r1,#1
        RSB      r1,r1,#0x78
        STRH     r1,[r2,#2]
        LDR      r0,|L1.2176|
        LDRB     r0,[r0,#0]  ; score1
        ADD      r0,r0,#1
        LDR      r1,|L1.2176|
        STRB     r0,[r1,#0]
        MOV      r0,#0
        LDR      r1,|L1.2156|
        STRB     r0,[r1,#0]
|L1.1292|
        LDR      r0,|L1.2148|
        LDRH     r0,[r0,#2]  ; ball
        LDR      r1,|L1.2160|
        LDRB     r1,[r1,#0]  ; border_field
        CMP      r0,r1
        BGE      |L1.1346|
        LDR      r1,|L1.2144|
        LDR      r0,[r1,#0]  ; vel_y
        CMP      r0,#0
        BLT      |L1.1316|
        MOV      r1,r0
        B        |L1.1320|
|L1.1316|
        RSB      r1,r0,#0
|L1.1320|
        LDR      r2,|L1.2144|
        STR      r1,[r2,#0]  ; vel_y
        LDR      r0,|L1.2148|
        LDRH     r1,[r0,#2]  ; ball
        LDRH     r0,[r0,#2]  ; ball
        LDR      r2,|L1.2160|
        LDRB     r2,[r2,#0]  ; border_field
        SUB      r0,r2,r0
        ADD      r0,r0,r1
        LDR      r1,|L1.2148|
        STRH     r0,[r1,#2]
        B        |L1.1434|
|L1.1346|
        LDR      r0,|L1.2148|
        LDRH     r1,[r0,#2]  ; ball
        LDRH     r0,[r0,#6]  ; ball
        ADDS     r0,r0,#1
        LDR      r2,|L1.2160|
        LDRB     r2,[r2,#0]  ; border_field
        ADD      r0,r0,r2
        LDR      r2,|L1.2180|
        LDRH     r2,[r2,#0]  ; MAX_Y
        SUBS     r0,r2,r0
        CMP      r1,r0
        BLE      |L1.1434|
        LDR      r1,|L1.2144|
        LDR      r0,[r1,#0]  ; vel_y
        CMP      r0,#0
        BLT      |L1.1382|
        MOV      r1,r0
        B        |L1.1386|
|L1.1382|
        RSB      r1,r0,#0
|L1.1386|
        RSB      r1,r1,#0
        LDR      r2,|L1.2144|
        STR      r1,[r2,#0]  ; vel_y
        LDR      r0,|L1.2148|
        LDRH     r1,[r0,#2]  ; ball
        LDRH     r0,[r0,#6]  ; ball
        ADD      r0,r0,#1
        LDR      r2,|L1.2160|
        LDRB     r2,[r2,#0]  ; border_field
        ADD      r0,r0,r2
        LDR      r2,|L1.2180|
        LDRH     r2,[r2,#0]  ; MAX_Y
        SUB      r0,r2,r0
        SUB      r0,r1,r0
        LDR      r1,|L1.2148|
        LDRH     r1,[r1,#2]  ; ball
        SUB      r0,r1,r0
        LDR      r1,|L1.2148|
        STRH     r0,[r1,#2]
|L1.1434|
        MOVS     r0,#0
        LDR      r4,|L1.2184|
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]  ; pl1
        LDRH     r2,[r4,#4]  ; pl1
        LDRH     r1,[r4,#2]  ; pl1
        LDRH     r0,[r4,#0]  ; pl1
        BL       DrawRectangle
        MOVS     r0,#0
        LDR      r4,|L1.2188|
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]  ; pl2
        LDRH     r2,[r4,#4]  ; pl2
        LDRH     r1,[r4,#2]  ; pl2
        LDRH     r0,[r4,#0]  ; pl2
        BL       DrawRectangle
        LDR      r0,|L1.2192|
        LDRH     r0,[r0,#0]  ; color_ball
        LDR      r4,|L1.2148|
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]  ; ball
        LDRH     r2,[r4,#4]  ; ball
        LDRH     r1,[r4,#2]  ; ball
        LDRH     r0,[r4,#0]  ; ball
        BL       DrawRectangle
        POP      {r0-r12,pc}
        ENDP

DrawInvaders PROC
        PUSH     {r2-r8,lr}
        MOVS     r3,#0xef
        MOV      r2,#0x13f
        MOVS     r1,#0
        MOV      r0,r1
        BL       Window
        LDR      r0,|L1.2196|
        LDRH     r0,[r0,#0]  ; bgColor
        LDR      r1,|L1.2200|
        STR      r0,[sp,#0]
        LDRB     r1,[r1,#0]  ; invadersPerRow
        ADD      r1,r1,r1,LSL #3
        LSLS     r3,r1,#2
        LDR      r1,|L1.2204|
        LDRB     r1,[r1,#0]  ; n_invaderRows
        ADD      r1,r1,r1,LSL #2
        MOVS     r6,#1
        ADD      r2,r6,r1,LSL #2
        LDR      r1,|L1.2204|
        LDRB     r1,[r1,#0]  ; n_invaderRows
        ADD      r1,r1,r1,LSL #2
        LDR      r6,|L1.2208|
        LDRH     r6,[r6,#0]  ; invaders_x
        SUB      r1,r6,r1,LSL #2
        UXTH     r0,r1
        LDR      r1,|L1.2212|
        LDRH     r1,[r1,#0]  ; invaders_y
        BL       DrawRectangle
        MOV      r0,#1
        LDR      r1,|L1.2216|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.2200|
        LDRB     r0,[r0,#0]  ; invadersPerRow
        ADD      r0,r0,r0,LSL #3
        MOV      r1,#0xa
        ADD      r0,r1,r0,LSL #2
        LDR      r1,|L1.2180|
        LDRH     r1,[r1,#0]  ; MAX_Y
        SUB      r0,r1,r0
        LDR      r1,|L1.2212|
        LDRH     r1,[r1,#0]  ; invaders_y
        CMP      r0,r1
        BGE      |L1.1628|
        MVN      r0,#4
        LDR      r1,|L1.2220|
        STR      r0,[r1,#0]  ; vel_invaders
        LDR      r0,|L1.2208|
        LDRH     r0,[r0,#0]  ; invaders_x
        SUB      r0,r0,#5
        LDR      r1,|L1.2208|
        STRH     r0,[r1,#0]
|L1.1628|
        LDR      r0,|L1.2212|
        LDRH     r0,[r0,#0]  ; invaders_y
        CMP      r0,#0xa
        BGE      |L1.1656|
        MOV      r0,#5
        LDR      r1,|L1.2220|
        STR      r0,[r1,#0]  ; vel_invaders
        LDR      r0,|L1.2208|
        LDRH     r0,[r0,#0]  ; invaders_x
        SUB      r0,r0,#5
        LDR      r1,|L1.2208|
        STRH     r0,[r1,#0]
|L1.1656|
        LDR      r0,|L1.2212|
        LDRH     r0,[r0,#0]  ; invaders_y
        LDR      r1,|L1.2220|
        LDR      r1,[r1,#0]  ; vel_invaders
        ADD      r0,r0,r1
        LDR      r1,|L1.2212|
        STRH     r0,[r1,#0]
        MOV      r3,#0xef
        MOV      r2,#0x13f
        MOV      r1,#0
        MOV      r0,r1
        BL       Window
        MOV      r4,#0
        B        |L1.1816|
|L1.1694|
        MOV      r5,#0
        B        |L1.1804|
|L1.1700|
        LDR      r0,|L1.2200|
        LDRB     r0,[r0,#0]  ; invadersPerRow
        MLA      r1,r0,r4,r5
        MOVS     r0,#1
        LSL      r0,r0,r1
        LDR      r1,|L1.2224|
        LDR      r1,[r1,#0]  ; destroyed
        TST      r0,r1
        BNE      |L1.1800|
        MOVS     r0,#3
        SDIV     r1,r4,r0
        MLS      r0,r0,r1,r4
        LDR      r1,|L1.2228|
        LDRH     r6,[r1,#0]  ; time_game
        ADD      r1,r6,r6,LSR #31
        ASRS     r1,r1,#1
        SUB      r1,r6,r1,LSL #1
        ADD      r0,r1,r0,LSL #1
        UXTH     r7,r0
        MOVS     r0,#0
        LDR      r1,|L1.2196|
        LDRH     r1,[r1,#0]  ; bgColor
        ADD      r2,r5,r5,LSL #3
        LDR      r3,|L1.2212|
        STRD     r1,r0,[sp,#0]
        LDRH     r3,[r3,#0]  ; invaders_y
        ADD      r2,r3,r2,LSL #2
        UXTH     r1,r2
        ADD      r2,r4,r4,LSL #2
        LDR      r3,|L1.2208|
        LDRH     r3,[r3,#0]  ; invaders_x
        SUB      r2,r3,r2,LSL #2
        UXTH     r0,r2
        MOV      r3,#0xffff
        MOV      r2,r7
        BL       PutFigure
|L1.1800|
        ADD      r5,r5,#1
|L1.1804|
        LDR      r0,|L1.2200|
        LDRB     r0,[r0,#0]  ; invadersPerRow
        CMP      r5,r0
        BLT      |L1.1700|
        ADD      r4,r4,#1
|L1.1816|
        LDR      r0,|L1.2204|
        LDRB     r0,[r0,#0]  ; n_invaderRows
        CMP      r4,r0
        BLT      |L1.1694|
        MOV      r0,#0
        LDR      r1,|L1.2216|
        STRB     r0,[r1,#0]
        POP      {r2-r8,pc}
        ENDP

init_space PROC
        PUSH     {r4,lr}
        MOV      r0,#0x2222
        LDR      r1,|L1.2196|
        STRH     r0,[r1,#0]
        MOV      r0,r1
        LDRH     r0,[r0,#0]  ; bgColor
        BL       LCD_Clear
        MOV      r0,#3
        LDR      r1,|L1.2232|
        STRB     r0,[r1,#0]
        MOV      r0,#0
        LDR      r1,|L1.2156|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.2228|
        STRH     r0,[r1,#0]
        LDR      r1,|L1.2236|
        STRH     r0,[r1,#0]
        LDR      r1,|L1.2240|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.2224|
        STR      r0,[r1,#0]  ; destroyed
        MOV      r0,#0x12b
        LDR      r1,|L1.2208|
        STRH     r0,[r1,#0]
        MOV      r0,#0x14
        LDR      r1,|L1.2212|
        STRH     r0,[r1,#0]
        MOV      r0,#0xa
        LDR      r1,|L1.2148|
        STRH     r0,[r1,#4]
        MOV      r0,#6
        STRH     r0,[r1,#6]
        LDR      r0,|L1.2168|
        LDRB     r0,[r0,#0]  ; vel_x_base
        LDR      r1,|L1.2172|
        STR      r0,[r1,#0]  ; vel_x
        LDR      r0,|L1.2184|
        LDRH     r0,[r0,#0]  ; pl1
        LDR      r1,|L1.2184|
        LDRH     r1,[r1,#4]  ; pl1
        ADD      r0,r0,r1
        LDR      r1,|L1.2148|
        STRH     r0,[r1,#0]
        LDR      r2,|L1.2244|
        LDRH     r1,[r2,#6]  ; invader
        ADD      r2,r1,r1,LSR #31
        LDR      r3,|L1.2184|
        LDRH     r3,[r3,#2]  ; pl1
        ADD      r2,r3,r2,ASR #1
        LDR      r3,|L1.2148|
        LDRH     r0,[r3,#6]  ; ball
        ADD      r3,r0,r0,LSR #31
        SUB      r2,r2,r3,ASR #1
        LDR      r3,|L1.2148|
        STRH     r2,[r3,#2]
        MOV      r0,#0x10
        LDR      r1,|L1.2244|
        STRH     r0,[r1,#4]
        MOV      r0,#0x20
        STRH     r0,[r1,#6]
        MOV      r0,r1
        LDRH     r0,[r0,#4]  ; invader
        LDR      r1,|L1.2184|
        STRH     r0,[r1,#4]
        LDR      r0,|L1.2244|
        LDRH     r0,[r0,#6]  ; invader
        STRH     r0,[r1,#6]
        MOV      r0,r1
        LDRH     r0,[r0,#4]  ; pl1
        RSB      r0,r0,#0x28
        STRH     r0,[r1,#0]
        MOV      r4,#0
        B        |L1.2060|
|L1.2014|
        MOV      r0,#0
        LDR      r1,|L1.2248|
        STRH     r0,[r1,r4,LSL #3]
        ADD      r1,r1,r4,LSL #3
        STRH     r0,[r1,#2]
        MOV      r0,#0xa
        LDR      r1,|L1.2248|
        ADD      r1,r1,r4,LSL #3
        STRH     r0,[r1,#4]
        MOV      r0,#6
        LDR      r1,|L1.2248|
        ADD      r1,r1,r4,LSL #3
        STRH     r0,[r1,#6]
        ADD      r0,r4,#1
        UXTB     r4,r0
|L1.2060|
        CMP      r4,#0xa
        BLT      |L1.2014|
        POP      {r4,pc}
        ENDP

space_invaders PROC
        PUSH     {r0-r12,lr}
        LDR      r0,|L1.2252|
        LDRB     r0,[r0,#0]  ; newGame
        CMP      r0,#1
        BNE      |L1.2090|
        BL       init_space
        MOV      r0,#0
        LDR      r1,|L1.2252|
        STRB     r0,[r1,#0]
|L1.2090|
        MOVS     r3,#0xef
        MOV      r2,#0x13f
        MOVS     r1,#0
        MOV      r0,r1
        BL       Window
        LDR      r1,|L1.2256|
        LDR      r0,|L1.2240|
        LDRB     r0,[r0,#0]  ; num_destroyed
        BL       conversor_IaS
        MOV      r0,#0xffff
        MOVS     r3,#0
        LDR      r2,|L1.2256|
        MOVS     r1,#0x14
        STR      r0,[sp,#0]
        MOVS     r0,#0x8c
        BL       GUI_Text
        LDR      r1,|L1.2256|
        LDR      r0,|L1.2232|
        LDRB     r0,[r0,#0]  ; lives
        BL       conversor_IaS
        B        |L1.2260|
|L1.2144|
        DCD      vel_y
|L1.2148|
        DCD      ball
|L1.2152|
        DCD      score2
|L1.2156|
        DCD      time_pong
|L1.2160|
        DCD      border_field
|L1.2164|
        DCD      MAX_X
|L1.2168|
        DCD      vel_x_base
|L1.2172|
        DCD      vel_x
|L1.2176|
        DCD      score1
|L1.2180|
        DCD      MAX_Y
|L1.2184|
        DCD      pl1
|L1.2188|
        DCD      pl2
|L1.2192|
        DCD      color_ball
|L1.2196|
        DCD      bgColor
|L1.2200|
        DCD      invadersPerRow
|L1.2204|
        DCD      n_invaderRows
|L1.2208|
        DCD      invaders_x
|L1.2212|
        DCD      invaders_y
|L1.2216|
        DCD      text_mode
|L1.2220|
        DCD      vel_invaders
|L1.2224|
        DCD      destroyed
|L1.2228|
        DCD      time_game
|L1.2232|
        DCD      lives
|L1.2236|
        DCD      misil_active
|L1.2240|
        DCD      num_destroyed
|L1.2244|
        DCD      invader
|L1.2248|
        DCD      misil
|L1.2252|
        DCD      newGame
|L1.2256|
        DCD      delay_read
|L1.2260|
        MOV      r0,#0xffff
        MOVS     r3,#0
        LDR      r2,|L1.3284|
        MOVS     r1,#0x14
        STR      r0,[sp,#0]
        MOVS     r0,#0xb4
        BL       GUI_Text
        LDR      r0,|L1.3288|
        LDRH     r0,[r0,#0]  ; bgColor
        LDR      r4,|L1.3292|
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]  ; invader
        LDRH     r2,[r4,#4]  ; invader
        LDR      r4,|L1.3296|
        LDRH     r1,[r4,#2]  ; pl1
        LDR      r4,|L1.3292|
        LDRH     r4,[r4,#4]  ; invader
        RSB      r4,r4,#0x29
        UXTH     r0,r4
        BL       DrawRectangle
        LDR      r0,|L1.3288|
        LDRH     r0,[r0,#0]  ; bgColor
        LDR      r4,|L1.3300|
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]  ; ball
        LDRH     r2,[r4,#4]  ; ball
        LDRH     r1,[r4,#2]  ; ball
        LDRH     r0,[r4,#0]  ; ball
        BL       DrawRectangle
        MOV      r10,#0
        B        |L1.2392|
|L1.2334|
        MOVS     r0,#1
        LSL      r0,r0,r10
        LDR      r1,|L1.3304|
        LDRH     r1,[r1,#0]  ; misil_active
        TST      r0,r1
        BEQ      |L1.2388|
        LDR      r0,|L1.3288|
        LDRH     r0,[r0,#0]  ; bgColor
        LDR      r4,|L1.3308|
        ADD      r4,r4,r10,LSL #3
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]
        LDR      r4,|L1.3308|
        ADD      r4,r4,r10,LSL #3
        LDRH     r2,[r4,#4]
        LDR      r4,|L1.3308|
        ADD      r4,r4,r10,LSL #3
        LDRH     r1,[r4,#2]
        LDR      r4,|L1.3308|
        LDRH     r0,[r4,r10,LSL #3]
        BL       DrawRectangle
|L1.2388|
        ADD      r10,r10,#1
|L1.2392|
        CMP      r10,#0xa
        BLT      |L1.2334|
        LDR      r0,|L1.3312|
        LDRH     r0,[r0,#0]  ; time_game
        BL       __aeabi_ui2f
        LDR      r1,|L1.3316|
        STR      r0,[sp,#4]
        BL       __aeabi_fdiv
        MOV      r11,r0
        BL       __aeabi_f2d
        MOVS     r2,#0
        LDR      r3,|L1.3320|
        STRD     r0,r1,[sp,#8]
        BL       __aeabi_dadd
        MOV      r4,r0
        MOV      r5,r1
        LDR      r0,|L1.3324|
        LDR      r0,[r0,#0]  ; vel_x
        BL       __aeabi_i2d
        MOV      r6,r0
        MOV      r2,r4
        MOV      r3,r5
        BL       __aeabi_dmul
        MOV      r8,r0
        BL       __aeabi_d2iz
        LDR      r1,|L1.3328|
        STR      r0,[r1,#0]  ; desp_x
        LDR      r0,|L1.3300|
        LDRH     r0,[r0,#0]  ; ball
        LDR      r1,[r1,#0]  ; desp_x
        ADDS     r0,r0,r1
        BPL      |L1.2484|
        MOV      r0,#0
        LDR      r1,|L1.3300|
        STRH     r0,[r1,#0]
        B        |L1.2498|
|L1.2484|
        LDR      r0,|L1.3300|
        LDRH     r0,[r0,#0]  ; ball
        LDR      r1,|L1.3328|
        LDR      r1,[r1,#0]  ; desp_x
        ADD      r0,r0,r1
        LDR      r1,|L1.3300|
        STRH     r0,[r1,#0]
|L1.2498|
        LDR      r1,|L1.3292|
        LDRH     r0,[r1,#6]  ; invader
        ADD      r1,r0,r0,LSR #31
        ASRS     r1,r1,#1
        ADDS     r1,r1,#1
        LDR      r2,|L1.3332|
        LDRH     r2,[r2,#0]  ; player1_y
        SUBS     r1,r2,r1
        CMP      r1,#0
        BLE      |L1.2550|
        LDR      r1,|L1.3292|
        LDRH     r0,[r1,#6]  ; invader
        ADD      r1,r0,r0,LSR #31
        ASR      r1,r1,#1
        ADD      r1,r1,#1
        LDR      r2,|L1.3332|
        LDRH     r2,[r2,#0]  ; player1_y
        SUB      r1,r2,r1
        LDR      r2,|L1.3296|
        STRH     r1,[r2,#2]
        B        |L1.2558|
|L1.2550|
        MOV      r0,#1
        LDR      r1,|L1.3296|
        STRH     r0,[r1,#2]
|L1.2558|
        LDR      r0,|L1.3292|
        LDRH     r0,[r0,#6]  ; invader
        ADDS     r0,r0,#1
        LDR      r1,|L1.3332|
        LDRH     r1,[r1,#0]  ; player1_y
        SUBS     r1,r1,r0
        LDR      r0,|L1.3336|
        LDRH     r0,[r0,#0]  ; MAX_Y
        SUBS     r0,r0,#1
        CMP      r1,r0
        BLE      |L1.2600|
        LDR      r0,|L1.3292|
        LDRH     r0,[r0,#6]  ; invader
        ADD      r0,r0,#2
        LDR      r1,|L1.3336|
        LDRH     r1,[r1,#0]  ; MAX_Y
        SUB      r0,r1,r0
        LDR      r1,|L1.3296|
        STRH     r0,[r1,#2]
|L1.2600|
        MOV      r10,#0
        B        |L1.3086|
|L1.2606|
        MOVS     r0,#1
        LSL      r0,r0,r10
        LDR      r1,|L1.3304|
        LDRH     r1,[r1,#0]  ; misil_active
        TST      r0,r1
        BEQ      |L1.2872|
        LDR      r0,|L1.3308|
        LDRH     r0,[r0,r10,LSL #3]
        SUB      r0,r0,#2
        LDR      r1,|L1.3308|
        STRH     r0,[r1,r10,LSL #3]
        MOV      r0,r1
        LDRH     r0,[r0,r10,LSL #3]
        CMP      r0,#0xa
        BGE      |L1.2706|
        LDR      r0,|L1.3288|
        LDRH     r0,[r0,#0]  ; bgColor
        MOV      r4,r1
        ADD      r4,r4,r10,LSL #3
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]
        MOV      r4,r1
        ADD      r4,r4,r10,LSL #3
        LDRH     r2,[r4,#4]
        MOV      r4,r1
        ADD      r4,r4,r10,LSL #3
        LDRH     r1,[r4,#2]
        LDR      r4,|L1.3308|
        LDRH     r0,[r4,r10,LSL #3]
        BL       DrawRectangle
        MOV      r0,#1
        LSL      r0,r0,r10
        LDR      r1,|L1.3304|
        LDRH     r1,[r1,#0]  ; misil_active
        BIC      r1,r1,r0
        LDR      r0,|L1.3304|
        STRH     r1,[r0,#0]
|L1.2706|
        LDR      r0,|L1.3308|
        ADD      r0,r0,r10,LSL #3
        LDR      r1,[r0,#0]
        STR      r1,[sp,#0]
        LDR      r0,[r0,#4]
        STR      r0,[sp,#4]
        LDR      r0,|L1.3296|
        LDR      r1,[r0,#0]  ; pl1
        STR      r1,[sp,#8]
        LDR      r0,[r0,#4]  ; pl1
        MOV      r3,r0
        MOV      r2,r1
        STR      r0,[sp,#0xc]
        LDRD     r0,r1,[sp,#0]
        BL       hitTest
        CMP      r0,#0
        BEQ      |L1.2922|
        LDR      r0,|L1.3288|
        LDRH     r0,[r0,#0]  ; bgColor
        LDR      r4,|L1.3308|
        ADD      r4,r4,r10,LSL #3
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]
        LDR      r4,|L1.3308|
        ADD      r4,r4,r10,LSL #3
        LDRH     r2,[r4,#4]
        LDR      r4,|L1.3308|
        ADD      r4,r4,r10,LSL #3
        LDRH     r1,[r4,#2]
        LDR      r4,|L1.3308|
        LDRH     r0,[r4,r10,LSL #3]
        BL       DrawRectangle
        LDR      r0,|L1.3340|
        LDRB     r0,[r0,#0]  ; lives
        CBNZ     r0,|L1.2836|
        MOV      r0,#0
        LDR      r1,|L1.3344|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.3348|
        STR      r0,[r1,#0]  ; pass
        LDR      r1,|L1.3344|
        STRB     r0,[r1,#0]
        BL       periodic_signal2_ms
        MOV      r0,#0x17
        LDR      r1,|L1.3352|
        STR      r0,[r1,#0]  ; state
        MOV      r0,#1
        LDR      r1,|L1.3356|
        STR      r0,[r1,#0]  ; draw_flag
        MOV      r0,#0
        LDR      r1,|L1.3360|
        STR      r0,[r1,#0]  ; screen_flag
|L1.2836|
        LDR      r0,|L1.3340|
        LDRB     r0,[r0,#0]  ; lives
        SUB      r0,r0,#1
        LDR      r1,|L1.3340|
        STRB     r0,[r1,#0]
        MOV      r0,#0
        LDR      r1,|L1.3304|
        STRH     r0,[r1,#0]
        LDR      r0,|L1.3364|
        LDRB     r0,[r0,#0]  ; vel_x_base
        LDR      r1,|L1.3324|
        STR      r0,[r1,#0]  ; vel_x
        LDR      r0,|L1.3296|
        LDRH     r0,[r0,#0]  ; pl1
        LDR      r1,|L1.3296|
        B        |L1.2874|
|L1.2872|
        B        |L1.3082|
|L1.2874|
        LDRH     r1,[r1,#4]  ; pl1
        ADD      r0,r0,r1
        LDR      r1,|L1.3300|
        STRH     r0,[r1,#0]
        LDR      r2,|L1.3292|
        LDRH     r1,[r2,#6]  ; invader
        ADD      r2,r1,r1,LSR #31
        LDR      r3,|L1.3296|
        LDRH     r3,[r3,#2]  ; pl1
        ADD      r2,r3,r2,ASR #1
        LDR      r3,|L1.3300|
        LDRH     r0,[r3,#6]  ; ball
        ADD      r3,r0,r0,LSR #31
        SUB      r2,r2,r3,ASR #1
        LDR      r3,|L1.3300|
        STRH     r2,[r3,#2]
        MOV      r0,#0
        LDR      r1,|L1.3368|
        STRB     r0,[r1,#0]
|L1.2922|
        LDR      r0,|L1.3308|
        ADD      r0,r0,r10,LSL #3
        LDR      r1,[r0,#0]
        STR      r1,[sp,#0]
        LDR      r0,[r0,#4]
        STR      r0,[sp,#4]
        LDR      r0,|L1.3300|
        LDR      r1,[r0,#0]  ; ball
        STR      r1,[sp,#8]
        LDR      r0,[r0,#4]  ; ball
        MOV      r3,r0
        MOV      r2,r1
        STR      r0,[sp,#0xc]
        LDRD     r0,r1,[sp,#0]
        BL       hitTest
        CBZ      r0,|L1.3082|
        LDR      r0,|L1.3288|
        LDRH     r0,[r0,#0]  ; bgColor
        LDR      r4,|L1.3308|
        ADD      r4,r4,r10,LSL #3
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]
        LDR      r4,|L1.3308|
        ADD      r4,r4,r10,LSL #3
        LDRH     r2,[r4,#4]
        LDR      r4,|L1.3308|
        ADD      r4,r4,r10,LSL #3
        LDRH     r1,[r4,#2]
        LDR      r4,|L1.3308|
        LDRH     r0,[r4,r10,LSL #3]
        BL       DrawRectangle
        MOV      r0,#1
        LSL      r0,r0,r10
        LDR      r1,|L1.3304|
        LDRH     r1,[r1,#0]  ; misil_active
        BIC      r1,r1,r0
        LDR      r0,|L1.3304|
        STRH     r1,[r0,#0]
        LDR      r0,|L1.3364|
        LDRB     r0,[r0,#0]  ; vel_x_base
        LDR      r1,|L1.3324|
        STR      r0,[r1,#0]  ; vel_x
        LDR      r0,|L1.3296|
        LDRH     r0,[r0,#0]  ; pl1
        LDR      r1,|L1.3296|
        LDRH     r1,[r1,#4]  ; pl1
        ADD      r0,r0,r1
        LDR      r1,|L1.3300|
        STRH     r0,[r1,#0]
        LDR      r2,|L1.3292|
        LDRH     r1,[r2,#6]  ; invader
        ADD      r2,r1,r1,LSR #31
        LDR      r3,|L1.3296|
        LDRH     r3,[r3,#2]  ; pl1
        ADD      r2,r3,r2,ASR #1
        LDR      r3,|L1.3300|
        LDRH     r0,[r3,#6]  ; ball
        ADD      r3,r0,r0,LSR #31
        SUB      r2,r2,r3,ASR #1
        LDR      r3,|L1.3300|
        STRH     r2,[r3,#2]
        MOV      r0,#0
        LDR      r1,|L1.3368|
        STRB     r0,[r1,#0]
|L1.3082|
        ADD      r10,r10,#1
|L1.3086|
        CMP      r10,#0xa
        BLT      |L1.2606|
        LDR      r0,|L1.3300|
        LDRH     r0,[r0,#0]  ; ball
        LDR      r1,|L1.3372|
        LDRH     r1,[r1,#0]  ; lowest_invader
        CMP      r0,r1
        BLT      |L1.3280|
        MOVS     r3,#0xef
        MOV      r2,#0x13f
        MOVS     r1,#0
        MOV      r0,r1
        BL       Window
        LDR      r0,|L1.3300|
        LDRH     r1,[r0,#0]  ; ball
        LDRH     r0,[r0,#4]  ; ball
        ADDS     r0,r0,#1
        LDR      r2,|L1.3376|
        LDRB     r2,[r2,#0]  ; border_field
        ADD      r0,r0,r2
        LDR      r2,|L1.3380|
        LDRH     r2,[r2,#0]  ; MAX_X
        SUBS     r0,r2,r0
        CMP      r1,r0
        BLE      |L1.3206|
        LDR      r0,|L1.3364|
        LDRB     r0,[r0,#0]  ; vel_x_base
        LDR      r1,|L1.3324|
        STR      r0,[r1,#0]  ; vel_x
        LDR      r0,|L1.3296|
        LDRH     r0,[r0,#0]  ; pl1
        LDR      r1,|L1.3296|
        LDRH     r1,[r1,#4]  ; pl1
        ADD      r0,r0,r1
        LDR      r1,|L1.3300|
        STRH     r0,[r1,#0]
        LDR      r2,|L1.3292|
        LDRH     r1,[r2,#6]  ; invader
        ADD      r2,r1,r1,LSR #31
        LDR      r3,|L1.3296|
        LDRH     r3,[r3,#2]  ; pl1
        ADD      r2,r3,r2,ASR #1
        LDR      r3,|L1.3300|
        LDRH     r0,[r3,#6]  ; ball
        ADD      r3,r0,r0,LSR #31
        SUB      r2,r2,r3,ASR #1
        LDR      r3,|L1.3300|
        STRH     r2,[r3,#2]
        MOV      r0,#0
        LDR      r1,|L1.3368|
        STRB     r0,[r1,#0]
|L1.3206|
        MOV      r10,#0
        B        |L1.3572|
|L1.3212|
        MOVS     r0,#1
        LSL      r0,r0,r10
        LDR      r1,|L1.3384|
        LDR      r1,[r1,#0]  ; destroyed
        TST      r0,r1
        BNE      |L1.3480|
        LDR      r0,|L1.3388|
        LDRB     r0,[r0,#0]  ; invadersPerRow
        SDIV     r0,r10,r0
        ADD      r0,r0,r0,LSL #2
        LDR      r1,|L1.3292|
        LDRH     r1,[r1,#4]  ; invader
        ADD      r0,r1,r0,LSL #2
        LDR      r1,|L1.3392|
        LDRH     r1,[r1,#0]  ; invaders_x
        SUB      r0,r1,r0
        LDR      r1,|L1.3292|
        STRH     r0,[r1,#0]
        LDR      r0,|L1.3388|
        LDRB     r0,[r0,#0]  ; invadersPerRow
        SDIV     r1,r10,r0
        MLS      r0,r0,r1,r10
        ADD      r0,r0,r0,LSL #3
        LDR      r1,|L1.3396|
        LDRH     r1,[r1,#0]  ; invaders_y
        B        |L1.3400|
|L1.3280|
        B        |L1.3590|
        DCW      0x0000
|L1.3284|
        DCD      delay_read
|L1.3288|
        DCD      bgColor
|L1.3292|
        DCD      invader
|L1.3296|
        DCD      pl1
|L1.3300|
        DCD      ball
|L1.3304|
        DCD      misil_active
|L1.3308|
        DCD      misil
|L1.3312|
        DCD      time_game
|L1.3316|
        DCD      0x41200000
|L1.3320|
        DCD      0x3ff00000
|L1.3324|
        DCD      vel_x
|L1.3328|
        DCD      desp_x
|L1.3332|
        DCD      player1_y
|L1.3336|
        DCD      MAX_Y
|L1.3340|
        DCD      lives
|L1.3344|
        DCD      game
|L1.3348|
        DCD      pass
|L1.3352|
        DCD      state
|L1.3356|
        DCD      draw_flag
|L1.3360|
        DCD      screen_flag
|L1.3364|
        DCD      vel_x_base
|L1.3368|
        DCD      time_pong
|L1.3372|
        DCD      lowest_invader
|L1.3376|
        DCD      border_field
|L1.3380|
        DCD      MAX_X
|L1.3384|
        DCD      destroyed
|L1.3388|
        DCD      invadersPerRow
|L1.3392|
        DCD      invaders_x
|L1.3396|
        DCD      invaders_y
|L1.3400|
        ADD      r0,r1,r0,LSL #2
        LDR      r1,|L1.4404|
        STRH     r0,[r1,#2]
        MOV      r0,r1
        LDR      r1,[r0,#0]  ; invader
        STR      r1,[sp,#8]
        LDR      r0,[r0,#4]  ; invader
        STR      r0,[sp,#0xc]
        LDR      r0,|L1.4408|
        LDR      r1,[r0,#0]  ; ball
        STR      r1,[sp,#0]
        LDR      r0,[r0,#4]  ; ball
        STR      r0,[sp,#4]
        MOV      r1,r0
        LDRD     r2,r3,[sp,#8]
        LDR      r0,[sp,#0]
        BL       hitTest
        CBZ      r0,|L1.3480|
        LDR      r0,|L1.4412|
        LDRH     r0,[r0,#0]  ; bgColor
        LDR      r4,|L1.4404|
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]  ; invader
        LDRH     r4,[r4,#4]  ; invader
        ADDS     r4,r4,#1
        UXTH     r2,r4
        LDR      r4,|L1.4404|
        LDRH     r1,[r4,#2]  ; invader
        LDRH     r0,[r4,#0]  ; invader
        BL       DrawRectangle
        LDR      r0,|L1.4416|
        LDRB     r0,[r0,#0]  ; num_destroyed
        ADD      r0,r0,#1
        LDR      r1,|L1.4416|
        B        |L1.3482|
|L1.3480|
        B        |L1.3568|
|L1.3482|
        STRB     r0,[r1,#0]
        MOV      r0,#1
        LSL      r0,r0,r10
        LDR      r1,|L1.4420|
        LDR      r1,[r1,#0]  ; destroyed
        ORR      r0,r0,r1
        LDR      r1,|L1.4420|
        STR      r0,[r1,#0]  ; destroyed
        LDR      r0,|L1.4424|
        LDRB     r0,[r0,#0]  ; vel_x_base
        LDR      r1,|L1.4428|
        STR      r0,[r1,#0]  ; vel_x
        LDR      r0,|L1.4432|
        LDRH     r0,[r0,#0]  ; pl1
        LDR      r1,|L1.4432|
        LDRH     r1,[r1,#4]  ; pl1
        ADD      r0,r0,r1
        LDR      r1,|L1.4408|
        STRH     r0,[r1,#0]
        MOV      r2,r4
        LDRH     r1,[r2,#6]  ; invader
        ADD      r2,r1,r1,LSR #31
        LDR      r3,|L1.4432|
        LDRH     r3,[r3,#2]  ; pl1
        ADD      r2,r3,r2,ASR #1
        LDR      r3,|L1.4408|
        LDRH     r0,[r3,#6]  ; ball
        ADD      r3,r0,r0,LSR #31
        SUB      r2,r2,r3,ASR #1
        LDR      r3,|L1.4408|
        STRH     r2,[r3,#2]
        MOV      r0,#0
        LDR      r1,|L1.4436|
        STRB     r0,[r1,#0]
        B        |L1.3588|
|L1.3568|
        ADD      r10,r10,#1
|L1.3572|
        LDR      r0,|L1.4440|
        LDRB     r0,[r0,#0]  ; n_invaderRows
        LDR      r1,|L1.4444|
        LDRB     r1,[r1,#0]  ; invadersPerRow
        MULS     r0,r1,r0
        CMP      r0,r10
        BGT      |L1.3212|
|L1.3588|
        NOP      
|L1.3590|
        MOV      r0,#1
        LDR      r1,|L1.4448|
        STRB     r0,[r1,#0]
        MOV      r0,#0
        LDR      r1,|L1.4412|
        LDRH     r1,[r1,#0]  ; bgColor
        STRD     r1,r0,[sp,#0]
        LDR      r0,|L1.4432|
        LDRH     r1,[r0,#2]  ; pl1
        MOV      r3,#0xffff
        MOV      r2,#7
        MOV      r0,#0x28
        BL       PutFigure
        MOV      r0,#0
        LDR      r1,|L1.4448|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.4452|
        LDRH     r0,[r0,#0]  ; color_ball
        LDR      r4,|L1.4408|
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]  ; ball
        LDRH     r2,[r4,#4]  ; ball
        LDRH     r1,[r4,#2]  ; ball
        LDRH     r0,[r4,#0]  ; ball
        BL       DrawRectangle
        MOV      r10,#0
        B        |L1.3720|
|L1.3664|
        MOVS     r0,#1
        LSL      r0,r0,r10
        LDR      r1,|L1.4456|
        LDRH     r1,[r1,#0]  ; misil_active
        TST      r0,r1
        BEQ      |L1.3716|
        MOVS     r0,#0
        LDR      r4,|L1.4460|
        ADD      r4,r4,r10,LSL #3
        STR      r0,[sp,#0]
        LDRH     r3,[r4,#6]
        LDR      r4,|L1.4460|
        ADD      r4,r4,r10,LSL #3
        LDRH     r2,[r4,#4]
        LDR      r4,|L1.4460|
        ADD      r4,r4,r10,LSL #3
        LDRH     r1,[r4,#2]
        LDR      r4,|L1.4460|
        LDRH     r0,[r4,r10,LSL #3]
        BL       DrawRectangle
|L1.3716|
        ADD      r10,r10,#1
|L1.3720|
        CMP      r10,#0xa
        BLT      |L1.3664|
        LDR      r0,|L1.4464|
        LDRB     r0,[r0,#0]  ; move_inv_flag
        CMP      r0,#1
        BNE      |L1.3858|
        MOV      r0,#0
        LDR      r1,|L1.4464|
        STRB     r0,[r1,#0]
        BL       DrawInvaders
        LDR      r1,|L1.4468|
        LDRH     r0,[r1,#0]  ; time_game
        ASR      r1,r0,#31
        ADD      r1,r0,r1,LSR #30
        ASR      r1,r1,#2
        SUBS     r1,r0,r1,LSL #2
        BNE      |L1.3858|
        MOV      r10,r1
        B        |L1.3850|
|L1.3772|
        MOVS     r0,#1
        LSL      r0,r0,r10
        LDR      r1,|L1.4456|
        LDRH     r1,[r1,#0]  ; misil_active
        TST      r0,r1
        BNE      |L1.3846|
        MOV      r0,#1
        LSL      r0,r0,r10
        LDR      r1,|L1.4456|
        LDRH     r1,[r1,#0]  ; misil_active
        ORR      r0,r0,r1
        LDR      r1,|L1.4456|
        STRH     r0,[r1,#0]
        MOV      r0,#0xdc
        LDR      r1,|L1.4460|
        STRH     r0,[r1,r10,LSL #3]
        BL       rand_number
        MOV      r1,#0x12c
        UDIV     r2,r0,r1
        MLS      r0,r1,r2,r0
        ADD      r0,r0,#0xa
        LDR      r1,|L1.4460|
        ADD      r1,r1,r10,LSL #3
        STRH     r0,[r1,#2]
        B        |L1.3856|
|L1.3846|
        ADD      r10,r10,#1
|L1.3850|
        CMP      r10,#0xa
        BLT      |L1.3772|
|L1.3856|
        NOP      
|L1.3858|
        POP      {r0-r12,pc}
        ENDP

draw_all_candy PROC
        PUSH     {r3-r5,lr}
        MOV      r4,#0
        B        |L1.3944|
|L1.3870|
        MOV      r5,#0
        B        |L1.3934|
|L1.3876|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.4472|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        AND      r0,r0,#7
        ADD      r1,r0,r0,LSL #6
        ADD      r0,r1,r0,LSL #10
        LDR      r1,|L1.4476|
        ADD      r0,r1,r0,LSL #1
        ADD      r2,r5,r5,LSL #5
        ADDS     r1,r2,#4
        ADD      r2,r4,r4,LSL #5
        STR      r0,[sp,#0]
        ADD      r0,r2,#0x54
        MOVS     r3,#0x21
        MOV      r2,r3
        BL       draw_RGB565_image
        ADD      r0,r5,#1
        UXTB     r5,r0
|L1.3934|
        CMP      r5,#7
        BLT      |L1.3876|
        ADD      r0,r4,#1
        UXTB     r4,r0
|L1.3944|
        CMP      r4,#7
        BLT      |L1.3870|
        POP      {r3-r5,pc}
        ENDP

candy_combo2 PROC
        PUSH     {r4-r10,lr}
        LDR      r0,|L1.4480|
        LDRB     r0,[r0,#0]  ; candy_state
        CMP      r0,#0
        BNE      |L1.4216|
        MOV      r4,r0
        B        |L1.4206|
|L1.3966|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.4472|
        LDRB     r0,[r1,r0]
        AND      r10,r0,#0xf
        MOV      r7,#1
        MOV      r5,r7
        B        |L1.4116|
|L1.3986|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.4472|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        AND      r0,r0,#0xf
        CMP      r0,r10
        BNE      |L1.4012|
        ADD      r0,r7,#1
        UXTB     r7,r0
        B        |L1.4112|
|L1.4012|
        CMP      r7,#3
        BLT      |L1.4094|
        LDR      r0,|L1.4484|
        LDR      r0,[r0,#0]  ; candy_score
        MOV      r1,#0xa
        MLA      r0,r1,r7,r0
        LDR      r1,|L1.4484|
        STR      r0,[r1,#0]  ; candy_score
        MOV      r0,#3
        LDR      r1,|L1.4480|
        STRB     r0,[r1,#0]
        MOV      r6,#0
        B        |L1.4090|
|L1.4046|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.4472|
        ADD      r1,r1,r0
        ADD      r0,r6,#1
        SUB      r0,r5,r0
        LDRB     r0,[r1,r0]
        ORR      r1,r0,#0x10
        RSB      r0,r4,r4,LSL #3
        LDR      r2,|L1.4472|
        ADD      r2,r2,r0
        ADD      r0,r6,#1
        SUB      r0,r5,r0
        STRB     r1,[r2,r0]
        ADD      r6,r6,#1
|L1.4090|
        CMP      r6,r7
        BLT      |L1.4046|
|L1.4094|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.4472|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        AND      r10,r0,#0xf
        MOV      r7,#1
|L1.4112|
        ADD      r5,r5,#1
|L1.4116|
        CMP      r5,#7
        BLT      |L1.3986|
        CMP      r7,#3
        BLT      |L1.4202|
        LDR      r0,|L1.4484|
        LDR      r0,[r0,#0]  ; candy_score
        MOV      r1,#0xa
        MLA      r0,r1,r7,r0
        LDR      r1,|L1.4484|
        STR      r0,[r1,#0]  ; candy_score
        MOV      r0,#3
        LDR      r1,|L1.4480|
        STRB     r0,[r1,#0]
        MOV      r6,#0
        B        |L1.4198|
|L1.4154|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.4472|
        ADD      r1,r1,r0
        ADD      r0,r6,#1
        SUB      r0,r5,r0
        LDRB     r0,[r1,r0]
        ORR      r1,r0,#0x10
        RSB      r0,r4,r4,LSL #3
        LDR      r2,|L1.4472|
        ADD      r2,r2,r0
        ADD      r0,r6,#1
        SUB      r0,r5,r0
        STRB     r1,[r2,r0]
        ADD      r6,r6,#1
|L1.4198|
        CMP      r6,r7
        BLT      |L1.4154|
|L1.4202|
        ADD      r4,r4,#1
|L1.4206|
        CMP      r4,#7
        BLT      |L1.3966|
        MOV      r4,#0
        B        |L1.4540|
|L1.4216|
        B        |L1.4788|
|L1.4218|
        LDR      r0,|L1.4472|
        LDRB     r0,[r0,r4]
        AND      r10,r0,#0xf
        MOV      r7,#1
        MOV      r5,r7
        B        |L1.4364|
|L1.4234|
        RSB      r0,r5,r5,LSL #3
        LDR      r1,|L1.4472|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r4]
        AND      r0,r0,#0xf
        CMP      r0,r10
        BNE      |L1.4260|
        ADD      r0,r7,#1
        UXTB     r7,r0
        B        |L1.4360|
|L1.4260|
        CMP      r7,#3
        BLT      |L1.4342|
        LDR      r0,|L1.4484|
        LDR      r0,[r0,#0]  ; candy_score
        MOV      r1,#0xa
        MLA      r0,r1,r7,r0
        LDR      r1,|L1.4484|
        STR      r0,[r1,#0]  ; candy_score
        MOV      r0,#3
        LDR      r1,|L1.4480|
        STRB     r0,[r1,#0]
        MOV      r6,#0
        B        |L1.4338|
|L1.4294|
        ADD      r0,r6,#1
        SUB      r0,r5,r0
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.4472|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r4]
        ORR      r1,r0,#0x10
        ADD      r0,r6,#1
        SUB      r0,r5,r0
        RSB      r0,r0,r0,LSL #3
        LDR      r2,|L1.4472|
        ADD      r0,r0,r2
        STRB     r1,[r0,r4]
        ADD      r6,r6,#1
|L1.4338|
        CMP      r6,r7
        BLT      |L1.4294|
|L1.4342|
        RSB      r0,r5,r5,LSL #3
        LDR      r1,|L1.4472|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r4]
        AND      r10,r0,#0xf
        MOV      r7,#1
|L1.4360|
        ADD      r5,r5,#1
|L1.4364|
        CMP      r5,#7
        BLT      |L1.4234|
        CMP      r7,#3
        BLT      |L1.4536|
        LDR      r0,|L1.4484|
        LDR      r0,[r0,#0]  ; candy_score
        MOV      r1,#0xa
        MLA      r0,r1,r7,r0
        LDR      r1,|L1.4484|
        STR      r0,[r1,#0]  ; candy_score
        MOV      r0,#3
        LDR      r1,|L1.4480|
        STRB     r0,[r1,#0]
        MOV      r6,#0
        B        |L1.4532|
        DCW      0x0000
|L1.4404|
        DCD      invader
|L1.4408|
        DCD      ball
|L1.4412|
        DCD      bgColor
|L1.4416|
        DCD      num_destroyed
|L1.4420|
        DCD      destroyed
|L1.4424|
        DCD      vel_x_base
|L1.4428|
        DCD      vel_x
|L1.4432|
        DCD      pl1
|L1.4436|
        DCD      time_pong
|L1.4440|
        DCD      n_invaderRows
|L1.4444|
        DCD      invadersPerRow
|L1.4448|
        DCD      text_mode
|L1.4452|
        DCD      color_ball
|L1.4456|
        DCD      misil_active
|L1.4460|
        DCD      misil
|L1.4464|
        DCD      move_inv_flag
|L1.4468|
        DCD      time_game
|L1.4472|
        DCD      candy_array
|L1.4476|
        DCD      caramels
|L1.4480|
        DCD      candy_state
|L1.4484|
        DCD      candy_score
|L1.4488|
        ADD      r0,r6,#1
        SUB      r0,r5,r0
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.5492|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r4]
        ORR      r1,r0,#0x10
        ADD      r0,r6,#1
        SUB      r0,r5,r0
        RSB      r0,r0,r0,LSL #3
        LDR      r2,|L1.5492|
        ADD      r0,r0,r2
        STRB     r1,[r0,r4]
        ADD      r6,r6,#1
|L1.4532|
        CMP      r6,r7
        BLT      |L1.4488|
|L1.4536|
        ADD      r4,r4,#1
|L1.4540|
        CMP      r4,#7
        BLT      |L1.4218|
        LDR      r0,|L1.5496|
        LDRB     r0,[r0,#0]  ; candy_state
        CMP      r0,#3
        BNE      |L1.4788|
        MOV      r4,#0
        B        |L1.4780|
|L1.4560|
        MOV      r5,#0
        B        |L1.4772|
|L1.4566|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.5492|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        UBFX     r0,r0,#4,#1
        CMP      r0,#1
        BNE      |L1.4768|
        MOV      r0,#6
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.5492|
        ADD      r1,r1,r2
        STRB     r0,[r1,r5]
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.5500|
        LDRB     r0,[r1,r0]
        MOV      r1,#1
        ADD      r9,r1,r0,ASR #5
        MOV      r8,#0
        B        |L1.4678|
|L1.4620|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.5500|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r8]
        BIC      r0,r0,#0xe0
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.5500|
        ADD      r1,r1,r2
        STRB     r0,[r1,r8]
        RSB      r0,r4,r4,LSL #3
        MOV      r1,r2
        ADD      r0,r0,r1
        LDRB     r0,[r0,r8]
        ORR      r0,r0,r9,LSL #5
        RSB      r1,r4,r4,LSL #3
        ADD      r1,r1,r2
        STRB     r0,[r1,r8]
        ADD      r8,r8,#1
|L1.4678|
        CMP      r8,r9
        BLT      |L1.4620|
        BL       rand_number
        MOV      r1,#6
        UDIV     r2,r0,r1
        MLS      r0,r1,r2,r0
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.5500|
        ADD      r2,r2,r1
        SUB      r1,r9,#1
        LDRB     r1,[r2,r1]
        ORR      r0,r0,r1
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.5500|
        ADD      r2,r2,r1
        SUB      r1,r9,#1
        STRB     r0,[r2,r1]
        MOV      r6,#0
        B        |L1.4764|
|L1.4736|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.5492|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r6]
        ADD      r0,r0,#0x20
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.5492|
        ADD      r1,r1,r2
        STRB     r0,[r1,r6]
        ADD      r6,r6,#1
|L1.4764|
        CMP      r6,r5
        BLT      |L1.4736|
|L1.4768|
        ADD      r5,r5,#1
|L1.4772|
        CMP      r5,#7
        BLT      |L1.4566|
        ADD      r4,r4,#1
|L1.4780|
        CMP      r4,#7
        BLT      |L1.4560|
        BL       draw_all_candy
|L1.4788|
        POP      {r4-r10,pc}
        ENDP

min_int PROC
        MOV      r2,r0
        CMP      r2,r1
        BLE      |L1.4802|
        MOV      r0,r1
|L1.4800|
        BX       lr
|L1.4802|
        MOV      r0,r2
        B        |L1.4800|
        ENDP

init_CANDY PROC
        PUSH     {r4-r6,lr}
        MOV      r0,#0
        LDR      r1,|L1.5504|
        STRH     r0,[r1,#0]
        MOV      r0,r1
        LDRH     r0,[r0,#0]  ; bgColor
        BL       LCD_Clear
        MOV      r0,#0
        LDR      r1,|L1.5508|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.5512|
        STRH     r0,[r1,#0]
        LDR      r1,|L1.5516|
        STR      r0,[r1,#0]  ; num_times_game
        LDR      r1,|L1.5520|
        STR      r0,[r1,#0]  ; candy_score
        MOV      r4,r0
        B        |L1.4930|
|L1.4848|
        MOV      r5,#0
        B        |L1.4922|
|L1.4854|
        BL       rand_number
        MOV      r1,#6
        UDIV     r2,r0,r1
        MLS      r0,r1,r2,r0
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.5492|
        ADD      r1,r1,r2
        STRB     r0,[r1,r5]
        MOV      r0,#0
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.5524|
        ADD      r1,r2,r1,LSL #2
        STR      r0,[r1,r5,LSL #2]
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.5500|
        ADD      r1,r1,r2
        STRB     r0,[r1,r5]
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.5528|
        ADD      r1,r1,r2
        STRB     r0,[r1,r5]
        ADD      r5,r5,#1
|L1.4922|
        CMP      r5,#7
        BLT      |L1.4854|
        ADD      r4,r4,#1
|L1.4930|
        CMP      r4,#7
        BLT      |L1.4848|
        MOV      r0,#0
        LDR      r1,|L1.5496|
        STRB     r0,[r1,#0]
        BL       draw_all_candy
        BL       candy_combo2
        POP      {r4-r6,pc}
        ENDP

CANDY_CRUSH PROC
        PUSH     {r1-r9,lr}
        MOV      r8,#0
        LDR      r0,|L1.5516|
        LDR      r0,[r0,#0]  ; num_times_game
        ADD      r0,r0,#1
        LDR      r1,|L1.5516|
        STR      r0,[r1,#0]  ; num_times_game
        LDR      r0,|L1.5512|
        LDRH     r0,[r0,#0]  ; time_game
        CMP      r0,#0xb4
        BLT      |L1.4988|
        MOV      r0,#1
        LDR      r1,|L1.5532|
        STRB     r0,[r1,#0]
|L1.4988|
        LDR      r0,|L1.5532|
        LDRB     r0,[r0,#0]  ; newGame
        CMP      r0,#1
        BNE      |L1.5008|
        BL       init_CANDY
        MOV      r0,#0
        LDR      r1,|L1.5532|
        STRB     r0,[r1,#0]
|L1.5008|
        LDR      r1,|L1.5536|
        LDR      r0,|L1.5520|
        LDR      r0,[r0,#0]  ; candy_score
        BL       conversor_IaS
        MOV      r4,#0
        B        |L1.5036|
|L1.5024|
        MOV      r0,#0x30
        ADD      r1,sp,#4
        STRB     r0,[r1,r4]
        ADD      r4,r4,#1
|L1.5036|
        LDR      r0,|L1.5536|
        BL       strlen
        RSB      r0,r0,#5
        CMP      r0,r4
        BHI      |L1.5024|
        MOV      r0,#0
        ADD      r1,sp,#4
        STRB     r0,[r1,r4]
        MOV      r0,#0xffff
        MOV      r3,#0
        ADR      r2,|L1.5540|
        MOV      r1,#0x14
        STR      r0,[sp,#0]
        MOV      r0,#5
        BL       GUI_Text
        MOV      r0,#0xffff
        MOVS     r3,#0
        ADD      r2,sp,#4
        MOVS     r1,#0x2a
        STR      r0,[sp,#0]
        MOVS     r0,#5
        BL       GUI_Text
        ADD      r0,sp,#4
        BL       strlen
        LSLS     r0,r0,#3
        ADDS     r0,r0,#5
        UXTH     r9,r0
        MOV      r0,#0xffff
        MOVS     r3,#0
        LDR      r2,|L1.5536|
        MOVS     r1,#0x2a
        STR      r0,[sp,#0]
        MOV      r0,r9
        BL       GUI_Text
        MOV      r0,#0xffff
        MOVS     r3,#0
        ADR      r2,|L1.5548|
        MOVS     r1,#0x50
        STR      r0,[sp,#0]
        MOVS     r0,#5
        BL       GUI_Text
        LDR      r1,|L1.5536|
        LDR      r0,|L1.5512|
        LDRH     r0,[r0,#0]  ; time_game
        BL       conversor_IaS
        MOV      r0,#0xffff
        MOVS     r3,#0
        LDR      r2,|L1.5536|
        MOVS     r1,#0x64
        STR      r0,[sp,#0]
        MOVS     r0,#5
        BL       GUI_Text
        BL       Read_Ads7846
        LDR      r1,|L1.5556|
        STR      r0,[r1,#0]  ; Ptr
        MOV      r0,r1
        LDR      r0,[r0,#0]  ; Ptr
        CMP      r0,#0
        BEQ      |L1.5448|
        LDR      r2,|L1.5560|
        MOV      r0,r1
        LDR      r1,[r0,#0]  ; Ptr
        LDR      r0,|L1.5564|
        BL       getDisplayPoint
        LDR      r0,|L1.5564|
        LDRH     r0,[r0,#0]  ; display
        CMP      r0,#0x54
|L1.5212|
        BLE      |L1.5450|
        LDR      r0,|L1.5564|
        LDRH     r0,[r0,#0]  ; display
        CMP      r0,#0x13a
        BGT      |L1.5450|
        LDR      r0,|L1.5564|
        LDRH     r0,[r0,#2]  ; display
        CMP      r0,#4
        BLE      |L1.5212|
        LDR      r0,|L1.5564|
        LDRH     r0,[r0,#2]  ; display
        CMP      r0,#0xeb
        BGE      |L1.5450|
        LDR      r0,|L1.5564|
        LDRH     r0,[r0,#0]  ; display
        SUB      r0,r0,#0x54
        MOV      r1,#0x21
        SDIV     r0,r0,r1
        LDR      r1,|L1.5568|
        STRH     r0,[r1,#0]
        LDR      r0,|L1.5564|
        LDRH     r0,[r0,#2]  ; display
        SUB      r0,r0,#4
        MOV      r1,#0x21
        SDIV     r0,r0,r1
        LDR      r1,|L1.5572|
        STRH     r0,[r1,#0]
        LDR      r0,|L1.5496|
        LDRB     r0,[r0,#0]  ; candy_state
        CMP      r0,#0
        BNE      |L1.5488|
        LDR      r0,|L1.5568|
        LDRH     r0,[r0,#0]  ; ts_x
        LDR      r1,|L1.5576|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.5572|
        LDRH     r0,[r0,#0]  ; ts_y
        LDR      r1,|L1.5580|
        STRB     r0,[r1,#0]
        MOV      r0,#0x46e
        LDR      r1,|L1.5584|
        STRH     r0,[r1,#8]
        MOV      r2,#0x5b6
        LDR      r1,|L1.5588|
        MOV      r0,#0
        BL       DMA_DAC_audio_Channel_Init
        MOV      r0,#0xffff
        LDR      r2,|L1.5580|
        STR      r0,[sp,#0]
        LDRB     r2,[r2,#0]  ; sel_candyy
        ADD      r2,r2,r2,LSL #5
        ADDS     r1,r2,#4
        LDR      r2,|L1.5576|
        LDRB     r2,[r2,#0]  ; sel_candyx
        ADD      r2,r2,r2,LSL #5
        ADD      r0,r2,#0x54
        MOVS     r3,#4
        MOVS     r2,#0x21
        BL       DrawRectangle
        MOV      r0,#0xffff
        LDR      r2,|L1.5580|
        STR      r0,[sp,#0]
        LDRB     r2,[r2,#0]  ; sel_candyy
        ADD      r2,r2,r2,LSL #5
        ADDS     r2,r2,#0x21
        UXTH     r1,r2
        LDR      r2,|L1.5576|
        LDRB     r2,[r2,#0]  ; sel_candyx
        ADD      r2,r2,r2,LSL #5
        ADD      r0,r2,#0x54
        MOVS     r3,#4
        MOVS     r2,#0x21
        BL       DrawRectangle
        MOV      r0,#0xffff
        LDR      r2,|L1.5580|
        STR      r0,[sp,#0]
        LDRB     r2,[r2,#0]  ; sel_candyy
        ADD      r2,r2,r2,LSL #5
        ADDS     r1,r2,#4
        LDR      r2,|L1.5576|
        LDRB     r2,[r2,#0]  ; sel_candyx
        ADD      r2,r2,r2,LSL #5
        ADDS     r2,r2,#0x71
        UXTH     r0,r2
        MOVS     r3,#0x21
        MOVS     r2,#4
        BL       DrawRectangle
        MOV      r0,#0xffff
        LDR      r2,|L1.5580|
        STR      r0,[sp,#0]
        LDRB     r2,[r2,#0]  ; sel_candyy
        B        |L1.5452|
|L1.5448|
        B        |L1.5852|
|L1.5450|
        B        |L1.5838|
|L1.5452|
        ADD      r2,r2,r2,LSL #5
        ADDS     r1,r2,#4
        LDR      r2,|L1.5576|
        LDRB     r2,[r2,#0]  ; sel_candyx
        ADD      r2,r2,r2,LSL #5
        ADD      r0,r2,#0x54
        MOVS     r3,#0x21
        MOVS     r2,#4
        BL       DrawRectangle
        MOV      r0,#1
        LDR      r1,|L1.5496|
        STRB     r0,[r1,#0]
        B        |L1.5838|
|L1.5488|
        B        |L1.5592|
        DCW      0x0000
|L1.5492|
        DCD      candy_array
|L1.5496|
        DCD      candy_state
|L1.5500|
        DCD      new_candy_array
|L1.5504|
        DCD      bgColor
|L1.5508|
        DCD      time_pong
|L1.5512|
        DCD      time_game
|L1.5516|
        DCD      num_times_game
|L1.5520|
        DCD      candy_score
|L1.5524|
        DCD      candy_desp
|L1.5528|
        DCD      new_candy_desp
|L1.5532|
        DCD      newGame
|L1.5536|
        DCD      delay_read
|L1.5540|
        DCB      "SCORE",0
        DCB      0
        DCB      0
|L1.5548|
        DCB      "TIME ",0
        DCB      0
        DCB      0
|L1.5556|
        DCD      Ptr
|L1.5560|
        DCD      matrix
|L1.5564|
        DCD      display
|L1.5568|
        DCD      ts_x
|L1.5572|
        DCD      ts_y
|L1.5576|
        DCD      sel_candyx
|L1.5580|
        DCD      sel_candyy
|L1.5584|
        DCD      0x4008c000
|L1.5588|
        DCD      click_audio
|L1.5592|
        LDR      r0,|L1.6612|
        LDRB     r0,[r0,#0]  ; candy_state
        CMP      r0,#1
        BNE      |L1.5838|
        LDR      r0,|L1.6616|
        LDRB     r0,[r0,#0]  ; sel_candyx
        LDR      r1,|L1.6620|
        LDRH     r1,[r1,#0]  ; ts_x
        SUB      r0,r0,r1
        LDR      r1,|L1.6624|
        STR      r0,[r1,#0]  ; difc_x
        LDR      r0,|L1.6628|
        LDRB     r0,[r0,#0]  ; sel_candyy
        LDR      r1,|L1.6632|
        LDRH     r1,[r1,#0]  ; ts_y
        SUB      r0,r0,r1
        LDR      r1,|L1.6636|
        STR      r0,[r1,#0]  ; difc_y
        LDR      r0,|L1.6624|
        LDR      r0,[r0,#0]  ; difc_x
        LDR      r1,[r1,#0]  ; difc_y
        ORRS     r0,r0,r1
        BEQ      |L1.5838|
        LDR      r2,|L1.6636|
        LDR      r0,[r2,#0]  ; difc_y
        LDR      r2,|L1.6624|
        LDR      r1,[r2,#0]  ; difc_x
        CMP      r1,#0
        BLT      |L1.5658|
        MOV      r2,r1
        B        |L1.5660|
|L1.5658|
        RSBS     r2,r1,#0
|L1.5660|
        CMP      r0,#0
        BLT      |L1.5668|
        MOV      r3,r0
        B        |L1.5670|
|L1.5668|
        RSBS     r3,r0,#0
|L1.5670|
        CMP      r2,r3
        BLT      |L1.5742|
        LDR      r0,|L1.6624|
        LDR      r0,[r0,#0]  ; difc_x
        CMP      r0,#0
        BLE      |L1.5712|
        LDR      r0,|L1.6616|
        LDRB     r0,[r0,#0]  ; sel_candyx
        SUB      r0,r0,#1
        LDR      r1,|L1.6640|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.6628|
        LDRB     r0,[r0,#0]  ; sel_candyy
        LDR      r1,|L1.6644|
        STRB     r0,[r1,#0]
        MOV      r0,#0
        LDR      r1,|L1.6648|
        STRB     r0,[r1,#0]
        B        |L1.5808|
|L1.5712|
        LDR      r0,|L1.6616|
        LDRB     r0,[r0,#0]  ; sel_candyx
        ADD      r0,r0,#1
        LDR      r1,|L1.6640|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.6628|
        LDRB     r0,[r0,#0]  ; sel_candyy
        LDR      r1,|L1.6644|
        STRB     r0,[r1,#0]
        MOV      r0,#2
        LDR      r1,|L1.6648|
        STRB     r0,[r1,#0]
        B        |L1.5808|
|L1.5742|
        LDR      r0,|L1.6636|
        LDR      r0,[r0,#0]  ; difc_y
        CMP      r0,#0
        BLE      |L1.5780|
        LDR      r0,|L1.6616|
        LDRB     r0,[r0,#0]  ; sel_candyx
        LDR      r1,|L1.6640|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.6628|
        LDRB     r0,[r0,#0]  ; sel_candyy
        SUB      r0,r0,#1
        LDR      r1,|L1.6644|
        STRB     r0,[r1,#0]
        MOV      r0,#1
        LDR      r1,|L1.6648|
        STRB     r0,[r1,#0]
        B        |L1.5808|
|L1.5780|
        LDR      r0,|L1.6616|
        LDRB     r0,[r0,#0]  ; sel_candyx
        LDR      r1,|L1.6640|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.6628|
        LDRB     r0,[r0,#0]  ; sel_candyy
        ADD      r0,r0,#1
        LDR      r1,|L1.6644|
        STRB     r0,[r1,#0]
        MOV      r0,#3
        LDR      r1,|L1.6648|
        STRB     r0,[r1,#0]
|L1.5808|
        MOV      r0,#2
        LDR      r1,|L1.6612|
        STRB     r0,[r1,#0]
        MOV      r0,#0x46e
        LDR      r1,|L1.6652|
        STRH     r0,[r1,#8]
        MOV      r2,#0x5b6
        LDR      r1,|L1.6656|
        MOV      r0,#0
        BL       DMA_DAC_audio_Channel_Init
|L1.5838|
        LDR      r0,|L1.6660|
        LDRH     r0,[r0,#0]  ; display
        CMP      r0,#0x50
        BGE      |L1.5852|
        ADR      r0,|L1.6664|
        BL       tx_cadena_UART0
|L1.5852|
        LDR      r0,|L1.6612|
        LDRB     r0,[r0,#0]  ; candy_state
        CMP      r0,#3
        BNE      |L1.6112|
        LDR      r0,|L1.6668|
        LDRB     r0,[r0,#0]  ; candy_acc
        ADD      r0,r0,#1
        LDR      r1,|L1.6668|
        STRB     r0,[r1,#0]
        MOV      r4,#0
        B        |L1.6138|
|L1.5878|
        MOV      r5,#6
        B        |L1.6130|
|L1.5884|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.6672|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        UBFX     r0,r0,#4,#1
        CMP      r0,#1
        BEQ      |L1.6126|
        RSB      r0,r4,r4,LSL #3
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        ASR      r6,r0,#5
        CBZ      r6,|L1.6040|
        MOV      r8,#1
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.6676|
        ADD      r0,r1,r0,LSL #2
        LDR      r1,[r0,r5,LSL #2]
        LDR      r0,|L1.6668|
        LDRB     r0,[r0,#0]  ; candy_acc
        ADD      r0,r0,#3
        ADD      r0,r0,r1
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.6676|
        ADD      r1,r2,r1,LSL #2
        STR      r0,[r1,r5,LSL #2]
        RSB      r0,r4,r4,LSL #3
        MOV      r1,r2
        ADD      r0,r1,r0,LSL #2
        LDR      r0,[r0,r5,LSL #2]
        ADD      r1,r6,r6,LSL #5
        CMP      r0,r1
        BLT      |L1.6052|
        ADD      r0,r6,r6,LSL #5
        RSB      r1,r4,r4,LSL #3
        ADD      r1,r2,r1,LSL #2
        STR      r0,[r1,r5,LSL #2]
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.6672|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        AND      r0,r0,#0xf
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.6672|
        ADD      r1,r1,r2
        ADD      r2,r5,r6
        STRB     r0,[r1,r2]
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.6672|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        BIC      r0,r0,#0xe0
        B        |L1.6042|
|L1.6040|
        B        |L1.6126|
|L1.6042|
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.6672|
        ADD      r1,r1,r2
        STRB     r0,[r1,r5]
|L1.6052|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.6672|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        AND      r0,r0,#7
        ADD      r1,r0,r0,LSL #6
        ADD      r0,r1,r0,LSL #10
        LDR      r1,|L1.6680|
        ADD      r0,r1,r0,LSL #1
        RSB      r2,r4,r4,LSL #3
        LDR      r3,|L1.6676|
        ADD      r2,r3,r2,LSL #2
        STR      r0,[sp,#0]
        LDR      r3,[r2,r5,LSL #2]
        ADD      r2,r5,r5,LSL #5
        ADDS     r2,r2,#4
        ADD      r2,r2,r3
        UXTH     r1,r2
        ADD      r2,r4,r4,LSL #5
        B        |L1.6114|
|L1.6112|
        B        |L1.6562|
|L1.6114|
        ADDS     r2,r2,#0x54
        UXTH     r0,r2
        MOVS     r3,#0x21
        MOV      r2,r3
        BL       draw_RGB565_image
|L1.6126|
        SUB      r5,r5,#1
|L1.6130|
        CMP      r5,#0
        BGE      |L1.5884|
        ADD      r4,r4,#1
|L1.6138|
        CMP      r4,#7
        BLT      |L1.5878|
        MOV      r4,#0
        B        |L1.6464|
|L1.6150|
        MOV      r5,#6
        B        |L1.6454|
|L1.6156|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.6684|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        CMP      r0,#0
        BEQ      |L1.6382|
        RSB      r0,r4,r4,LSL #3
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        ASR      r6,r0,#5
        CMP      r6,#0
        BEQ      |L1.6382|
        MOV      r8,#1
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.6688|
        ADD      r0,r0,r1
        LDRB     r1,[r0,r5]
        LDR      r0,|L1.6668|
        LDRB     r0,[r0,#0]  ; candy_acc
        ADD      r0,r0,#3
        ADD      r0,r0,r1
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.6688|
        ADD      r1,r1,r2
        STRB     r0,[r1,r5]
        RSB      r0,r4,r4,LSL #3
        MOV      r1,r2
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        ADD      r1,r6,r6,LSL #5
        CMP      r0,r1
        BLT      |L1.6306|
        ADD      r0,r6,r6,LSL #5
        RSB      r1,r4,r4,LSL #3
        ADD      r1,r1,r2
        STRB     r0,[r1,r5]
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.6684|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        AND      r1,r0,#0xf
        RSB      r0,r4,r4,LSL #3
        LDR      r2,|L1.6672|
        ADD      r2,r2,r0
        SUB      r0,r6,#1
        SUB      r0,r0,r5
        STRB     r1,[r2,r0]
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.6684|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        BIC      r0,r0,#0xe0
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.6684|
        ADD      r1,r1,r2
        STRB     r0,[r1,r5]
|L1.6306|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.6688|
        ADD      r0,r0,r1
        LDRB     r1,[r0,r5]
        ADD      r0,r5,#1
        MOV      r2,#0x21
        MLS      r7,r2,r0,r1
        CMP      r7,#0
        BLT      |L1.6384|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.6684|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        AND      r0,r0,#7
        ADD      r1,r0,r0,LSL #6
        ADD      r0,r1,r0,LSL #10
        LDR      r1,|L1.6680|
        ADD      r0,r1,r0,LSL #1
        ADD      r1,r4,r4,LSL #5
        ADDS     r1,r1,#0x54
        STR      r0,[sp,#0]
        UXTH     r0,r1
        MOVS     r3,#0x21
        MOV      r2,r3
        ADDS     r1,r7,#4
        UXTH     r1,r1
        BL       draw_RGB565_image
|L1.6382|
        B        |L1.6450|
|L1.6384|
        ADD      r7,r7,#0x21
        CMP      r7,#1
        BLT      |L1.6450|
        RSB      r0,r4,r4,LSL #3
        LDR      r1,|L1.6684|
        ADD      r0,r0,r1
        LDRB     r0,[r0,r5]
        AND      r0,r0,#7
        ADD      r1,r0,r0,LSL #6
        ADD      r0,r1,r0,LSL #10
        LDR      r1,|L1.6680|
        ADD      r0,r1,r0,LSL #1
        RSB      r1,r7,#0x21
        MOVS     r2,#0x42
        MLA      r0,r2,r1,r0
        ADD      r1,r4,r4,LSL #5
        ADDS     r1,r1,#0x54
        STR      r0,[sp,#0]
        UXTH     r0,r1
        UXTH     r3,r7
        MOVS     r2,#0x21
        MOVS     r1,#4
        BL       draw_RGB565_image
|L1.6450|
        SUB      r5,r5,#1
|L1.6454|
        CMP      r5,#0
        BGE      |L1.6156|
        ADD      r4,r4,#1
|L1.6464|
        CMP      r4,#7
        BLT      |L1.6150|
        CMP      r8,#0
        BNE      |L1.6562|
        MOV      r4,#0
        B        |L1.6538|
|L1.6482|
        MOV      r5,#0
        B        |L1.6530|
|L1.6488|
        MOV      r0,#0
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.6676|
        ADD      r1,r2,r1,LSL #2
        STR      r0,[r1,r5,LSL #2]
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.6684|
        ADD      r1,r1,r2
        STRB     r0,[r1,r5]
        RSB      r1,r4,r4,LSL #3
        LDR      r2,|L1.6688|
        ADD      r1,r1,r2
        STRB     r0,[r1,r5]
        ADD      r5,r5,#1
|L1.6530|
        CMP      r5,#7
        BLT      |L1.6488|
        ADD      r4,r4,#1
|L1.6538|
        CMP      r4,#7
        BLT      |L1.6482|
        MOV      r0,#0
        LDR      r1,|L1.6612|
        STRB     r0,[r1,#0]
        BL       candy_combo2
        MOV      r0,#0
        LDR      r1,|L1.6668|
        STRB     r0,[r1,#0]
|L1.6562|
        LDR      r0,|L1.6612|
        LDRB     r0,[r0,#0]  ; candy_state
        CMP      r0,#2
        BNE      |L1.6824|
        LDR      r0,|L1.6648|
        LDRB     r0,[r0,#0]  ; candy_st
        UBFX     r0,r0,#1,#1
        CBNZ     r0,|L1.6692|
        LDR      r0,|L1.6616|
        LDRB     r0,[r0,#0]  ; sel_candyx
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.6676|
        ADD      r0,r1,r0,LSL #2
        LDR      r1,|L1.6628|
        LDRB     r1,[r1,#0]  ; sel_candyy
        LDR      r1,[r0,r1,LSL #2]
        LDR      r0,|L1.6668|
        LDRB     r0,[r0,#0]  ; candy_acc
        ADD      r0,r0,#3
        B        |L1.6694|
|L1.6612|
        DCD      candy_state
|L1.6616|
        DCD      sel_candyx
|L1.6620|
        DCD      ts_x
|L1.6624|
        DCD      difc_x
|L1.6628|
        DCD      sel_candyy
|L1.6632|
        DCD      ts_y
|L1.6636|
        DCD      difc_y
|L1.6640|
        DCD      candy_swapx
|L1.6644|
        DCD      candy_swapy
|L1.6648|
        DCD      candy_st
|L1.6652|
        DCD      0x4008c000
|L1.6656|
        DCD      click_audio
|L1.6660|
        DCD      display
|L1.6664|
        DCB      "P",0
        DCB      0
        DCB      0
|L1.6668|
        DCD      candy_acc
|L1.6672|
        DCD      candy_array
|L1.6676|
        DCD      candy_desp
|L1.6680|
        DCD      caramels
|L1.6684|
        DCD      new_candy_array
|L1.6688|
        DCD      new_candy_desp
|L1.6692|
        B        |L1.6776|
|L1.6694|
        SUB      r1,r1,r0
        LDR      r0,|L1.7716|
        LDRB     r0,[r0,#0]  ; sel_candyx
        RSB      r0,r0,r0,LSL #3
        LDR      r2,|L1.7720|
        ADD      r0,r2,r0,LSL #2
        LDR      r2,|L1.7724|
        LDRB     r2,[r2,#0]  ; sel_candyy
        STR      r1,[r0,r2,LSL #2]
        LDR      r0,|L1.7728|
        LDRB     r0,[r0,#0]  ; candy_swapx
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.7720|
        ADD      r0,r1,r0,LSL #2
        LDR      r1,|L1.7732|
        LDRB     r1,[r1,#0]  ; candy_swapy
        LDR      r1,[r0,r1,LSL #2]
        LDR      r0,|L1.7736|
        LDRB     r0,[r0,#0]  ; candy_acc
        ADD      r0,r0,#3
        ADD      r0,r0,r1
        LDR      r1,|L1.7728|
        LDRB     r1,[r1,#0]  ; candy_swapx
        RSB      r1,r1,r1,LSL #3
        LDR      r2,|L1.7720|
        ADD      r1,r2,r1,LSL #2
        LDR      r2,|L1.7732|
        LDRB     r2,[r2,#0]  ; candy_swapy
        STR      r0,[r1,r2,LSL #2]
        B        |L1.6890|
|L1.6776|
        LDR      r0,|L1.7716|
        LDRB     r0,[r0,#0]  ; sel_candyx
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.7720|
        ADD      r0,r1,r0,LSL #2
        LDR      r1,|L1.7724|
        LDRB     r1,[r1,#0]  ; sel_candyy
        LDR      r1,[r0,r1,LSL #2]
        LDR      r0,|L1.7736|
        LDRB     r0,[r0,#0]  ; candy_acc
        ADD      r0,r0,#3
        ADD      r0,r0,r1
        LDR      r1,|L1.7716|
        LDRB     r1,[r1,#0]  ; sel_candyx
        RSB      r1,r1,r1,LSL #3
        LDR      r2,|L1.7720|
        ADD      r1,r2,r1,LSL #2
        B        |L1.6826|
|L1.6824|
        B        |L1.7822|
|L1.6826|
        LDR      r2,|L1.7724|
        LDRB     r2,[r2,#0]  ; sel_candyy
        STR      r0,[r1,r2,LSL #2]
        LDR      r0,|L1.7728|
        LDRB     r0,[r0,#0]  ; candy_swapx
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.7720|
        ADD      r0,r1,r0,LSL #2
        LDR      r1,|L1.7732|
        LDRB     r1,[r1,#0]  ; candy_swapy
        LDR      r1,[r0,r1,LSL #2]
        LDR      r0,|L1.7736|
        LDRB     r0,[r0,#0]  ; candy_acc
        ADD      r0,r0,#3
        SUB      r0,r1,r0
        LDR      r1,|L1.7728|
        LDRB     r1,[r1,#0]  ; candy_swapx
        RSB      r1,r1,r1,LSL #3
        LDR      r2,|L1.7720|
        ADD      r1,r2,r1,LSL #2
        LDR      r2,|L1.7732|
        LDRB     r2,[r2,#0]  ; candy_swapy
        STR      r0,[r1,r2,LSL #2]
|L1.6890|
        LDR      r0,|L1.7736|
        LDRB     r0,[r0,#0]  ; candy_acc
        ADD      r0,r0,#1
        LDR      r1,|L1.7736|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.7716|
        LDRB     r1,[r1,#0]  ; sel_candyx
        RSB      r1,r1,r1,LSL #3
        LDR      r2,|L1.7720|
        ADD      r1,r2,r1,LSL #2
        LDR      r2,|L1.7724|
        LDRB     r2,[r2,#0]  ; sel_candyy
        LDR      r0,[r1,r2,LSL #2]
        CMP      r0,#0
        BLT      |L1.6932|
        MOV      r1,r0
        B        |L1.6934|
|L1.6932|
        RSBS     r1,r0,#0
|L1.6934|
        CMP      r1,#0x21
        BLE      |L1.7068|
        LDR      r0,|L1.7716|
        LDRB     r0,[r0,#0]  ; sel_candyx
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.7740|
        ADD      r0,r0,r1
        LDR      r1,|L1.7724|
        LDRB     r1,[r1,#0]  ; sel_candyy
        LDRB     r6,[r0,r1]
        LDR      r0,|L1.7728|
        LDRB     r0,[r0,#0]  ; candy_swapx
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.7740|
        ADD      r0,r0,r1
        LDR      r1,|L1.7732|
        LDRB     r1,[r1,#0]  ; candy_swapy
        LDRB     r0,[r0,r1]
        LDR      r1,|L1.7716|
        LDRB     r1,[r1,#0]  ; sel_candyx
        RSB      r1,r1,r1,LSL #3
        LDR      r2,|L1.7740|
        ADD      r1,r1,r2
        LDR      r2,|L1.7724|
        LDRB     r2,[r2,#0]  ; sel_candyy
        STRB     r0,[r1,r2]
        LDR      r0,|L1.7728|
        LDRB     r0,[r0,#0]  ; candy_swapx
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.7740|
        ADD      r0,r0,r1
        LDR      r1,|L1.7732|
        LDRB     r1,[r1,#0]  ; candy_swapy
        STRB     r6,[r0,r1]
        MOV      r1,#0
        LDR      r0,|L1.7716|
        LDRB     r0,[r0,#0]  ; sel_candyx
        RSB      r0,r0,r0,LSL #3
        LDR      r2,|L1.7720|
        ADD      r0,r2,r0,LSL #2
        LDR      r2,|L1.7724|
        LDRB     r2,[r2,#0]  ; sel_candyy
        STR      r1,[r0,r2,LSL #2]
        LDR      r0,|L1.7728|
        LDRB     r0,[r0,#0]  ; candy_swapx
        RSB      r0,r0,r0,LSL #3
        LDR      r2,|L1.7720|
        ADD      r0,r2,r0,LSL #2
        LDR      r2,|L1.7732|
        LDRB     r2,[r2,#0]  ; candy_swapy
        STR      r1,[r0,r2,LSL #2]
        MOV      r0,r1
        LDR      r1,|L1.7744|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.7736|
        STRB     r0,[r1,#0]
|L1.7068|
        LDR      r0,|L1.7748|
        LDRB     r0,[r0,#0]  ; candy_st
        TST      r0,#1
        BNE      |L1.7332|
        LDR      r0,|L1.7728|
        LDRB     r0,[r0,#0]  ; candy_swapx
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.7740|
        ADD      r0,r0,r1
        LDR      r1,|L1.7732|
        LDRB     r1,[r1,#0]  ; candy_swapy
        LDRB     r0,[r0,r1]
        AND      r0,r0,#7
        ADD      r1,r0,r0,LSL #6
        ADD      r0,r1,r0,LSL #10
        LDR      r1,|L1.7752|
        ADD      r0,r1,r0,LSL #1
        LDR      r2,|L1.7728|
        STR      r0,[sp,#0]
        LDRB     r2,[r2,#0]  ; candy_swapx
        RSB      r2,r2,r2,LSL #3
        LDR      r3,|L1.7720|
        ADD      r2,r3,r2,LSL #2
        LDR      r3,|L1.7732|
        LDRB     r3,[r3,#0]  ; candy_swapy
        LDR      r3,[r2,r3,LSL #2]
        LDR      r2,|L1.7728|
        LDRB     r2,[r2,#0]  ; candy_swapx
        ADD      r2,r2,r2,LSL #5
        ADDS     r2,r2,#0x54
        ADD      r2,r2,r3
        UXTH     r0,r2
        LDR      r2,|L1.7724|
        LDRB     r2,[r2,#0]  ; sel_candyy
        ADD      r2,r2,r2,LSL #5
        ADDS     r1,r2,#4
        MOVS     r3,#0x21
        MOV      r2,r3
        BL       draw_RGB565_image
        LDR      r0,|L1.7716|
        LDRB     r0,[r0,#0]  ; sel_candyx
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.7740|
        ADD      r0,r0,r1
        LDR      r1,|L1.7724|
        LDRB     r1,[r1,#0]  ; sel_candyy
        LDRB     r0,[r0,r1]
        AND      r0,r0,#7
        ADD      r1,r0,r0,LSL #6
        ADD      r0,r1,r0,LSL #10
        LDR      r1,|L1.7752|
        ADD      r0,r1,r0,LSL #1
        LDR      r2,|L1.7716|
        STR      r0,[sp,#0]
        LDRB     r2,[r2,#0]  ; sel_candyx
        RSB      r2,r2,r2,LSL #3
        LDR      r3,|L1.7720|
        ADD      r2,r3,r2,LSL #2
        LDR      r3,|L1.7724|
        LDRB     r3,[r3,#0]  ; sel_candyy
        LDR      r3,[r2,r3,LSL #2]
        LDR      r2,|L1.7716|
        LDRB     r2,[r2,#0]  ; sel_candyx
        ADD      r2,r2,r2,LSL #5
        ADDS     r2,r2,#0x54
        ADD      r2,r2,r3
        UXTH     r0,r2
        LDR      r2,|L1.7724|
        LDRB     r2,[r2,#0]  ; sel_candyy
        ADD      r2,r2,r2,LSL #5
        ADDS     r1,r2,#4
        MOVS     r3,#0x21
        MOV      r2,r3
        BL       draw_RGB565_image
        LDR      r1,|L1.7716|
        LDRB     r1,[r1,#0]  ; sel_candyx
        RSB      r1,r1,r1,LSL #3
        LDR      r2,|L1.7720|
        ADD      r1,r2,r1,LSL #2
        LDR      r2,|L1.7724|
        LDRB     r2,[r2,#0]  ; sel_candyy
        LDR      r0,[r1,r2,LSL #2]
        CMP      r0,#0
        BLT      |L1.7292|
        MOV      r1,r0
        B        |L1.7296|
|L1.7292|
        RSB      r1,r0,#0
|L1.7296|
        MOV      r6,r1
        RSB      r1,r6,#0x21
        MOV      r0,r6
        BL       min_int
        MOV      r6,r0
        CMP      r6,#0
        BLE      |L1.7422|
        LDR      r0,|L1.7716|
        LDRB     r1,[r0,#0]  ; sel_candyx
        LDR      r0,|L1.7728|
        LDRB     r0,[r0,#0]  ; candy_swapx
        BL       min_int
        ADD      r0,r0,r0,LSL #5
        B        |L1.7334|
|L1.7332|
        B        |L1.7424|
|L1.7334|
        ADDS     r0,r0,#0x54
        UXTH     r9,r0
        LDR      r0,|L1.7756|
        LDRH     r0,[r0,#0]  ; bgColor
        STR      r0,[sp,#0]
        LDR      r0,|L1.7724|
        LDRB     r0,[r0,#0]  ; sel_candyy
        ADD      r0,r0,r0,LSL #5
        ADDS     r1,r0,#4
        MOVS     r3,#0x21
        UXTH     r2,r6
        MOV      r0,r9
        BL       DrawRectangle
        LDR      r0,|L1.7716|
        LDRB     r1,[r0,#0]  ; sel_candyx
        LDR      r0,|L1.7728|
        LDRB     r0,[r0,#0]  ; candy_swapx
        BL       min_int
        ADDS     r0,r0,#1
        ADD      r0,r0,r0,LSL #5
        ADDS     r0,r0,#0x54
        RSB      r1,r6,#0x21
        ADD      r0,r0,r1
        UXTH     r9,r0
        LDR      r0,|L1.7756|
        LDRH     r0,[r0,#0]  ; bgColor
        STR      r0,[sp,#0]
        LDR      r0,|L1.7724|
        LDRB     r0,[r0,#0]  ; sel_candyy
        ADD      r0,r0,r0,LSL #5
        ADDS     r1,r0,#4
        MOVS     r3,#0x21
        UXTH     r2,r6
        MOV      r0,r9
        BL       DrawRectangle
|L1.7422|
        B        |L1.7818|
|L1.7424|
        LDR      r0,|L1.7728|
        LDRB     r0,[r0,#0]  ; candy_swapx
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.7740|
        ADD      r0,r0,r1
        LDR      r1,|L1.7732|
        LDRB     r1,[r1,#0]  ; candy_swapy
        LDRB     r0,[r0,r1]
        AND      r0,r0,#7
        ADD      r1,r0,r0,LSL #6
        ADD      r0,r1,r0,LSL #10
        LDR      r1,|L1.7752|
        ADD      r0,r1,r0,LSL #1
        LDR      r2,|L1.7728|
        STR      r0,[sp,#0]
        LDRB     r2,[r2,#0]  ; candy_swapx
        RSB      r2,r2,r2,LSL #3
        LDR      r3,|L1.7720|
        ADD      r2,r3,r2,LSL #2
        LDR      r3,|L1.7732|
        LDRB     r3,[r3,#0]  ; candy_swapy
        LDR      r3,[r2,r3,LSL #2]
        LDR      r2,|L1.7732|
        LDRB     r2,[r2,#0]  ; candy_swapy
        ADD      r2,r2,r2,LSL #5
        ADDS     r2,r2,#4
        ADD      r2,r2,r3
        UXTH     r1,r2
        LDR      r2,|L1.7728|
        LDRB     r2,[r2,#0]  ; candy_swapx
        ADD      r2,r2,r2,LSL #5
        ADD      r0,r2,#0x54
        MOVS     r3,#0x21
        MOV      r2,r3
        BL       draw_RGB565_image
        LDR      r0,|L1.7716|
        LDRB     r0,[r0,#0]  ; sel_candyx
        RSB      r0,r0,r0,LSL #3
        LDR      r1,|L1.7740|
        ADD      r0,r0,r1
        LDR      r1,|L1.7724|
        LDRB     r1,[r1,#0]  ; sel_candyy
        LDRB     r0,[r0,r1]
        AND      r0,r0,#7
        ADD      r1,r0,r0,LSL #6
        ADD      r0,r1,r0,LSL #10
        LDR      r1,|L1.7752|
        ADD      r0,r1,r0,LSL #1
        LDR      r2,|L1.7716|
        STR      r0,[sp,#0]
        LDRB     r2,[r2,#0]  ; sel_candyx
        RSB      r2,r2,r2,LSL #3
        LDR      r3,|L1.7720|
        ADD      r2,r3,r2,LSL #2
        LDR      r3,|L1.7724|
        LDRB     r3,[r3,#0]  ; sel_candyy
        LDR      r3,[r2,r3,LSL #2]
        LDR      r2,|L1.7724|
        LDRB     r2,[r2,#0]  ; sel_candyy
        ADD      r2,r2,r2,LSL #5
        ADDS     r2,r2,#4
        ADD      r2,r2,r3
        UXTH     r1,r2
        LDR      r2,|L1.7716|
        LDRB     r2,[r2,#0]  ; sel_candyx
        ADD      r2,r2,r2,LSL #5
        ADD      r0,r2,#0x54
        MOVS     r3,#0x21
        MOV      r2,r3
        BL       draw_RGB565_image
        LDR      r1,|L1.7716|
        LDRB     r1,[r1,#0]  ; sel_candyx
        RSB      r1,r1,r1,LSL #3
        LDR      r2,|L1.7720|
        ADD      r1,r2,r1,LSL #2
        LDR      r2,|L1.7724|
        LDRB     r2,[r2,#0]  ; sel_candyy
        LDR      r0,[r1,r2,LSL #2]
        CMP      r0,#0
        BLT      |L1.7642|
        MOV      r1,r0
        B        |L1.7646|
|L1.7642|
        RSB      r1,r0,#0
|L1.7646|
        MOV      r6,r1
        RSB      r1,r6,#0x21
        MOV      r0,r6
        BL       min_int
        MOV      r6,r0
        CMP      r6,#0
        BLE      |L1.7818|
        LDR      r0,|L1.7724|
        LDRB     r1,[r0,#0]  ; sel_candyy
        LDR      r0,|L1.7732|
        LDRB     r0,[r0,#0]  ; candy_swapy
        BL       min_int
        ADD      r0,r0,r0,LSL #5
        ADDS     r0,r0,#4
        UXTH     r9,r0
        LDR      r0,|L1.7756|
        LDRH     r0,[r0,#0]  ; bgColor
        LDR      r1,|L1.7716|
        STR      r0,[sp,#0]
        LDRB     r1,[r1,#0]  ; sel_candyx
        ADD      r1,r1,r1,LSL #5
        ADD      r0,r1,#0x54
        UXTH     r3,r6
        MOVS     r2,#0x21
        MOV      r1,r9
        BL       DrawRectangle
        B        |L1.7760|
|L1.7716|
        DCD      sel_candyx
|L1.7720|
        DCD      candy_desp
|L1.7724|
        DCD      sel_candyy
|L1.7728|
        DCD      candy_swapx
|L1.7732|
        DCD      candy_swapy
|L1.7736|
        DCD      candy_acc
|L1.7740|
        DCD      candy_array
|L1.7744|
        DCD      candy_state
|L1.7748|
        DCD      candy_st
|L1.7752|
        DCD      caramels
|L1.7756|
        DCD      bgColor
|L1.7760|
        LDR      r0,|L1.7828|
        LDRB     r1,[r0,#0]  ; sel_candyy
        LDR      r0,|L1.7832|
        LDRB     r0,[r0,#0]  ; candy_swapy
        BL       min_int
        ADDS     r0,r0,#1
        ADD      r0,r0,r0,LSL #5
        ADDS     r0,r0,#4
        RSB      r1,r6,#0x21
        ADD      r0,r0,r1
        UXTH     r9,r0
        LDR      r0,|L1.7836|
        LDRH     r0,[r0,#0]  ; bgColor
        LDR      r1,|L1.7840|
        STR      r0,[sp,#0]
        LDRB     r1,[r1,#0]  ; sel_candyx
        ADD      r1,r1,r1,LSL #5
        ADD      r0,r1,#0x54
        UXTH     r3,r6
        MOVS     r2,#0x21
        MOV      r1,r9
        BL       DrawRectangle
|L1.7818|
        BL       candy_combo2
|L1.7822|
        POP      {r1-r9,pc}
        ENDP

        DCW      0x0000
|L1.7828|
        DCD      sel_candyy
|L1.7832|
        DCD      candy_swapy
|L1.7836|
        DCD      bgColor
|L1.7840|
        DCD      sel_candyx

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

misil
        %        80
candy_array
        %        52
candy_desp
        %        196
new_candy_array
        %        49
new_candy_desp
        %        49

        AREA ||.constdata||, DATA, READONLY, ALIGN=1

figures
        DCW      0x03c0,0x1ff8
        DCW      0x3ffc,0x399c
        DCW      0x3ffc,0x0660
        DCW      0x0db0,0x300c
        DCW      0x03c0,0x1ff8
        DCW      0x3ffc,0x399c
        DCW      0x3ffc,0x0e70
        DCW      0x1998,0x0c30
        DCW      0x0820,0x2448
        DCW      0x2fe8,0x3bb8
        DCW      0x3ff8,0x1ff0
        DCW      0x0820,0x1010
        DCW      0x0820,0x0440
        DCW      0x0fe0,0x1bb0
        DCW      0x3ff8,0x2fe8
        DCW      0x2828,0x06c0
        DCW      0x0180,0x03c0
        DCW      0x07e0,0x0db0
        DCW      0x0ff0,0x05a0
        DCW      0x0810,0x0420
        DCW      0x0180,0x03c0
        DCW      0x07e0,0x0db0
        DCW      0x0ff0,0x0240
        DCW      0x05a0,0x0a50
        DCW      0x0000,0x07e0
        DCW      0x1ff8,0x3ffc
        DCW      0x6db6,0xffff
        DCW      0x398e,0x1004
        DCW      0x0180,0x03c0
        DCW      0x07e0,0x0660
        DCW      0x07e0,0x0ff0
        DCW      0x0bd0,0x0810

        AREA ||.data||, DATA, ALIGN=2

rand_seed
        DCW      0x0001
game
        DCB      0x00
dir_ball
        DCB      0x00
vel_x_base
        DCB      0x03
vel_y_base
        DCB      0x06,0x00,0x00
vel_x
        DCD      0x00000003
vel_y
        DCD      0x00000000
color_ball
        DCW      0xffff
bgColor
        DCW      0x2222
newGame
        DCB      0x01
border_field
        DCB      0x0a
time_game
        DCW      0x0000
num_times_game
        DCD      0x00000000
score1
        DCB      0x00
score2
        DCB      0x00
time_pong
        DCB      0x00,0x00
invaders_x
        DCW      0x012b
invaders_y
        DCW      0x0014
vel_invaders
        DCD      0x00000005
lowest_invader
        DCW      0x0064
num_destroyed
        DCB      0x00,0x00
destroyed
        DCD      0x00000000
n_invaderRows
        DCB      0x06
invadersPerRow
        DCB      0x05
misil_active
        DCW      0x0000
lives
        DCB      0x03,0x00
ts_x
        DCW      0x0000
ts_y
        DCW      0x0000
candy_state
        DCB      0x00
sel_candyx
        DCB      0x00
sel_candyy
        DCB      0x00,0x00,0x00,0x00
candy_score
        DCD      0x00000000
highest_candy_score
        DCD      0x00000000
candy_acc
        DCB      0x00,0x00
pl1
        DCB      0x00,0x00
        DCD      0x00000000
        DCB      0x00,0x00
pl2
        DCB      0x00,0x00
        DCD      0x00000000
        DCB      0x00,0x00
ball
        DCB      0x00,0x00
        DCD      0x00000000
        DCB      0x00,0x00,0x00,0x00
desp_x
        DCD      0x00000000
desp_y
        DCD      0x00000000
invader
        %        8
candy_swapx
        DCB      0x00
candy_swapy
        DCB      0x00,0x00,0x00
candy_sel_dep
        DCD      0x00000000
candy_swap_desp
        DCD      0x00000000
candy_st
        DCB      0x00,0x00,0x00,0x00
difc_x
        DCD      0x00000000
difc_y
        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "GAMES\\GAMES.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_GAMES_c_b371412c____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_GAMES_c_b371412c____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_GAMES_c_b371412c____REVSH|
#line 128
|__asm___7_GAMES_c_b371412c____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT rand_number [CODE]
        EXPORT hitTest [CODE]
        EXPORT init_PONG [CODE]
        EXPORT PONG [CODE]
        EXPORT DrawInvaders [CODE]
        EXPORT init_space [CODE]
        EXPORT space_invaders [CODE]
        EXPORT draw_all_candy [CODE]
        EXPORT candy_combo2 [CODE]
        EXPORT min_int [CODE]
        EXPORT init_CANDY [CODE]
        EXPORT CANDY_CRUSH [CODE]
        EXPORT misil [DATA,SIZE=80]
        EXPORT candy_array [DATA,SIZE=49]
        EXPORT candy_desp [DATA,SIZE=196]
        EXPORT new_candy_array [DATA,SIZE=49]
        EXPORT new_candy_desp [DATA,SIZE=49]
        EXPORT figures [DATA,SIZE=128]
        EXPORT rand_seed [DATA,SIZE=2]
        EXPORT game [DATA,SIZE=1]
        EXPORT dir_ball [DATA,SIZE=1]
        EXPORT vel_x_base [DATA,SIZE=1]
        EXPORT vel_y_base [DATA,SIZE=1]
        EXPORT vel_x [DATA,SIZE=4]
        EXPORT vel_y [DATA,SIZE=4]
        EXPORT color_ball [DATA,SIZE=2]
        EXPORT bgColor [DATA,SIZE=2]
        EXPORT newGame [DATA,SIZE=1]
        EXPORT border_field [DATA,SIZE=1]
        EXPORT time_game [DATA,SIZE=2]
        EXPORT num_times_game [DATA,SIZE=4]
        EXPORT score1 [DATA,SIZE=1]
        EXPORT score2 [DATA,SIZE=1]
        EXPORT time_pong [DATA,SIZE=1]
        EXPORT invaders_x [DATA,SIZE=2]
        EXPORT invaders_y [DATA,SIZE=2]
        EXPORT vel_invaders [DATA,SIZE=4]
        EXPORT lowest_invader [DATA,SIZE=2]
        EXPORT num_destroyed [DATA,SIZE=1]
        EXPORT destroyed [DATA,SIZE=4]
        EXPORT n_invaderRows [DATA,SIZE=1]
        EXPORT invadersPerRow [DATA,SIZE=1]
        EXPORT misil_active [DATA,SIZE=2]
        EXPORT lives [DATA,SIZE=1]
        EXPORT ts_x [DATA,SIZE=2]
        EXPORT ts_y [DATA,SIZE=2]
        EXPORT candy_state [DATA,SIZE=1]
        EXPORT sel_candyx [DATA,SIZE=1]
        EXPORT sel_candyy [DATA,SIZE=1]
        EXPORT candy_score [DATA,SIZE=4]
        EXPORT highest_candy_score [DATA,SIZE=4]
        EXPORT candy_acc [DATA,SIZE=1]
        EXPORT pl1 [DATA,SIZE=8]
        EXPORT pl2 [DATA,SIZE=8]
        EXPORT ball [DATA,SIZE=8]
        EXPORT desp_x [DATA,SIZE=4]
        EXPORT desp_y [DATA,SIZE=4]
        EXPORT invader [DATA,SIZE=8]
        EXPORT candy_swapx [DATA,SIZE=1]
        EXPORT candy_swapy [DATA,SIZE=1]
        EXPORT candy_sel_dep [DATA,SIZE=4]
        EXPORT candy_swap_desp [DATA,SIZE=4]
        EXPORT candy_st [DATA,SIZE=1]
        EXPORT difc_x [DATA,SIZE=4]
        EXPORT difc_y [DATA,SIZE=4]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT caramels [DATA]
        IMPORT LCD_Clear [CODE]
        IMPORT conversor_IaS [CODE]
        IMPORT GUI_Text [CODE]
        IMPORT LCD_DrawLine [CODE]
        IMPORT DrawRectangle [CODE]
        IMPORT __aeabi_ui2f [CODE]
        IMPORT __aeabi_fdiv [CODE]
        IMPORT __aeabi_f2d [CODE]
        IMPORT __aeabi_dadd [CODE]
        IMPORT __aeabi_i2d [CODE]
        IMPORT __aeabi_dmul [CODE]
        IMPORT __aeabi_d2iz [CODE]
        IMPORT DMA_DAC_audio_Channel_Init [CODE]
        IMPORT delay_read [DATA]
        IMPORT player1_y [DATA]
        IMPORT player2_y [DATA]
        IMPORT muelle [DATA]
        IMPORT MAX_X [DATA]
        IMPORT MAX_Y [DATA]
        IMPORT Window [CODE]
        IMPORT PutFigure [CODE]
        IMPORT text_mode [DATA]
        IMPORT periodic_signal2_ms [CODE]
        IMPORT pass [DATA]
        IMPORT state [DATA]
        IMPORT draw_flag [DATA]
        IMPORT screen_flag [DATA]
        IMPORT move_inv_flag [DATA]
        IMPORT draw_RGB565_image [CODE]
        IMPORT strlen [CODE]
        IMPORT Read_Ads7846 [CODE]
        IMPORT getDisplayPoint [CODE]
        IMPORT tx_cadena_UART0 [CODE]
        IMPORT Ptr [DATA]
        IMPORT matrix [DATA]
        IMPORT display [DATA]
        IMPORT click_audio [DATA]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
