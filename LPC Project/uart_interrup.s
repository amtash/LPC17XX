; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--debug -c --asm -ouart_interrup.o --depend=uart_interrup.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=uart_interrup.crf UART\UART_interrup.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

UART0_IRQHandler PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.280|
        LDR      r0,[r0,#8]
        AND      r0,r0,#0xe
        CMP      r0,#2
        BEQ      |L1.188|
        CMP      r0,#4
        BNE      |L1.186|
        LDR      r0,|L1.280|
        LDRB     r0,[r0,#0]
        LDR      r1,|L1.284|
        LDR      r1,[r1,#0]  ; p_buffrx
        STRB     r0,[r1,#0]
        LDR      r0,|L1.284|
        LDR      r0,[r0,#0]  ; p_buffrx
        LDRB     r0,[r0,#0]
        CMP      r0,#0x20
        BNE      |L1.84|
        MOV      r0,#0
        LDR      r1,|L1.284|
        LDR      r1,[r1,#0]  ; p_buffrx
        STRB     r0,[r1,#0]
        LDR      r0,|L1.288|
        LDRB     r0,[r0,#0]  ; n_words_buffer
        ADD      r0,r0,#1
        LDR      r1,|L1.288|
        STRB     r0,[r1,#0]
        MOV      r0,r1
        LDRB     r0,[r0,#0]  ; n_words_buffer
        ADD      r1,r0,r0,LSL #3
        ADD      r0,r1,r0,LSL #4
        LDR      r1,|L1.292|
        ADD      r0,r1,r0,LSL #1
        LDR      r1,|L1.284|
        STR      r0,[r1,#0]  ; p_buffrx
        B        |L1.186|
|L1.84|
        LDR      r0,|L1.284|
        LDR      r0,[r0,#0]  ; p_buffrx
        LDRB     r0,[r0,#0]
        CMP      r0,#0xd
        BEQ      |L1.104|
        LDR      r0,|L1.284|
        LDR      r0,[r0,#0]  ; p_buffrx
        LDRB     r0,[r0,#0]
        CMP      r0,#0xa
        BNE      |L1.174|
|L1.104|
        LDR      r0,|L1.284|
        LDR      r0,[r0,#0]  ; p_buffrx
        LDRB     r0,[r0,#-1]
        CMP      r0,#0xd
        BEQ      |L1.128|
        LDR      r0,|L1.284|
        LDR      r0,[r0,#0]  ; p_buffrx
        LDRB     r0,[r0,#-1]
        CMP      r0,#0xa
        BNE      |L1.160|
|L1.128|
        MOV      r0,#0
        LDR      r1,|L1.284|
        LDR      r1,[r1,#0]  ; p_buffrx
        STRB     r0,[r1,#-1]
        BL       rx_cadena_UART0
        LDR      r0,|L1.292|
        LDR      r1,|L1.284|
        STR      r0,[r1,#0]  ; p_buffrx
        MOV      r0,#0
        LDR      r1,|L1.288|
        STRB     r0,[r1,#0]
        B        |L1.186|
|L1.160|
        LDR      r0,|L1.284|
        LDR      r0,[r0,#0]  ; p_buffrx
        ADD      r0,r0,#1
        LDR      r1,|L1.284|
        STR      r0,[r1,#0]  ; p_buffrx
        B        |L1.186|
|L1.174|
        LDR      r0,|L1.284|
        LDR      r0,[r0,#0]  ; p_buffrx
        ADD      r0,r0,#1
        LDR      r1,|L1.284|
        STR      r0,[r1,#0]  ; p_buffrx
|L1.186|
        B        |L1.276|
|L1.188|
        LDR      r0,|L1.296|
        LDR      r0,[r0,#0]  ; pcad_tx
        ADD      r0,r0,#1
        LDR      r1,|L1.296|
        STR      r0,[r1,#0]  ; pcad_tx
        MOV      r0,r1
        LDR      r0,[r0,#0]  ; pcad_tx
        LDRB     r0,[r0,#0]
        CBZ      r0,|L1.220|
        MOV      r0,r1
        LDR      r0,[r0,#0]  ; pcad_tx
        LDRB     r0,[r0,#0]
        LDR      r1,|L1.280|
        STRB     r0,[r1,#0]
        B        |L1.274|
|L1.220|
        LDR      r0,|L1.296|
        LDR      r0,[r0,#0]  ; pcad_tx
        ADD      r0,r0,#1
        LDR      r1,|L1.296|
        STR      r0,[r1,#0]  ; pcad_tx
        MOV      r0,r1
        LDR      r0,[r0,#0]  ; pcad_tx
        LDRB     r0,[r0,#0]
        CBZ      r0,|L1.252|
        MOV      r0,r1
        LDR      r0,[r0,#0]  ; pcad_tx
        LDRB     r0,[r0,#0]
        LDR      r1,|L1.280|
        STRB     r0,[r1,#0]
        B        |L1.274|
|L1.252|
        MOV      r0,#1
        LDR      r1,|L1.300|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.304|
        LDR      r1,|L1.296|
        STR      r0,[r1,#0]  ; pcad_tx
        MOV      r0,#0
        LDR      r1,|L1.308|
        STR      r0,[r1,#0]  ; pos_cadena
|L1.274|
        NOP      
|L1.276|
        NOP      
        POP      {r4,pc}
        ENDP

|L1.280|
        DCD      0x4000c000
|L1.284|
        DCD      p_buffrx
|L1.288|
        DCD      n_words_buffer
|L1.292|
        DCD      buffer_rx
|L1.296|
        DCD      pcad_tx
|L1.300|
        DCD      tx_completa
|L1.304|
        DCD      buffer_tx
|L1.308|
        DCD      pos_cadena

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=0

buffer_rx
        %        500
buffer_tx
        %        2000

        AREA ||.data||, DATA, ALIGN=2

baudrate
        DCD      0x00004b00
tipo_rx
        DCB      0x00,0x00,0x00,0x00
pos_cadena
        DCD      0x00000000
p_buffrx
        DCD      buffer_rx
pcad_tx
        DCD      buffer_tx
tx_completa
        DCB      0x01
n_words_buffer
        DCB      0x00
uart_f
        DCB      0x00

;*** Start embedded assembler ***

#line 1 "UART\\UART_interrup.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_UART_interrup_c_baudrate____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_UART_interrup_c_baudrate____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_UART_interrup_c_baudrate____REVSH|
#line 128
|__asm___15_UART_interrup_c_baudrate____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT UART0_IRQHandler [CODE]
        EXPORT buffer_rx [DATA,SIZE=500]
        EXPORT buffer_tx [DATA,SIZE=2000]
        EXPORT baudrate [DATA,SIZE=4]
        EXPORT tipo_rx [DATA,SIZE=1]
        EXPORT pos_cadena [DATA,SIZE=4]
        EXPORT p_buffrx [DATA,SIZE=4]
        EXPORT pcad_tx [DATA,SIZE=4]
        EXPORT tx_completa [DATA,SIZE=1]
        EXPORT n_words_buffer [DATA,SIZE=1]
        EXPORT uart_f [DATA,SIZE=1]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT rx_cadena_UART0 [CODE]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
