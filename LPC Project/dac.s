; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--debug -c --asm -odac.o --depend=dac.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=dac.crf DAC\dac.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

DACInit PROC
        LDR      r1,|L1.380|
        LDR      r1,[r1,#4]
        BIC      r1,r1,#0x300000
        LDR      r2,|L1.380|
        STR      r1,[r2,#4]
        MOV      r1,r2
        LDR      r1,[r1,#4]
        ORR      r1,r1,#0x200000
        STR      r1,[r2,#4]
        MOV      r1,#0
        LDR      r2,|L1.384|
        STR      r1,[r2,#4]
        MOV      r1,#0x10000
        STR      r1,[r2,#0]
        CBZ      r0,|L1.94|
        CMP      r0,#1
        BNE      |L1.94|
        LDR      r1,|L1.388|
        LDR      r1,[r1,#0]
        BIC      r1,r1,#0xc00000
        LDR      r2,|L1.392|
        STR      r1,[r2,#0x1a8]
        MOV      r1,#0xc35
        LDR      r2,|L1.384|
        STRH     r1,[r2,#8]
        MOV      r1,r2
        LDR      r1,[r1,#4]
        ORR      r1,r1,#2
        STR      r1,[r2,#4]
        MOV      r1,r2
        LDR      r1,[r1,#4]
        ORR      r1,r1,#4
        STR      r1,[r2,#4]
        MOV      r1,r2
        LDR      r1,[r1,#4]
        ORR      r1,r1,#8
        STR      r1,[r2,#4]
|L1.94|
        BX       lr
        ENDP

set_sound PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        LDR      r0,|L1.396|
        STR      r5,[r0,#0]  ; DAC_frecuency
        LDR      r0,|L1.400|
        STR      r4,[r0,#0]  ; frecuency_sound
        LDR      r0,|L1.396|
        LDR      r0,[r0,#0]  ; DAC_frecuency
        LDR      r1,|L1.400|
        LDR      r1,[r1,#0]  ; frecuency_sound
        UDIV     r0,r0,r1
        LDR      r1,|L1.404|
        STR      r0,[r1,#0]  ; samples_per_cicle
        LDR      r0,|L1.400|
        LDR      r0,[r0,#0]  ; frecuency_sound
        LDR      r1,|L1.408|
        LDR      r1,[r1,#0]  ; num_samples_cycle
        MUL      r0,r0,r1
        LDR      r1,|L1.412|
        UDIV     r6,r1,r0
        MOV      r0,r6
        BL       periodic_signal_us
        POP      {r4-r6,pc}
        ENDP

set_samples_cycle PROC
        PUSH     {r4-r11,lr}
        SUB      sp,sp,#0x24
        MOV      r11,r0
        LDR      r0,|L1.408|
        STR      r11,[r0,#0]  ; num_samples_cycle
        LDR      r0,|L1.404|
        STR      r11,[r0,#0]  ; samples_per_cicle
        MOV      r0,#0
        BL       LCD_Clear
        MOV      r10,#0
        B        |L1.364|
|L1.186|
        LDR      r0,|L1.408|
        LDR      r0,[r0,#0]  ; num_samples_cycle
        BL       __aeabi_ui2f
        STR      r0,[sp,#8]
        MOV      r0,r10
        BL       __aeabi_ui2f
        STR      r0,[sp,#4]
        LDR      r1,[sp,#8]
        BL       __aeabi_fdiv
        STR      r0,[sp,#0xc]
        BL       __aeabi_f2d
        MOV      r6,r0
        LDR      r2,|L1.416|
        LDR      r3,|L1.420|
        BL       __aeabi_dmul
        STRD     r0,r1,[sp,#0x10]
        BL       ||sin||
        MOVS     r2,#0
        MOV      r3,#0x40800000
        STRD     r0,r1,[sp,#0x18]
        BL       __aeabi_dmul
        MOV      r4,r0
        MOVS     r2,#0
        LDR      r3,|L1.424|
        BL       __aeabi_dadd
        MOV      r8,r0
        BL       __aeabi_d2uiz
        LSL      r0,r0,#16
        LSR      r0,r0,#10
        LDR      r1,|L1.428|
        STR      r0,[r1,r10,LSL #2]
        MOV      r0,#0x12c
        MUL      r0,r10,r0
        LDR      r1,|L1.408|
        LDR      r1,[r1,#0]  ; num_samples_cycle
        UDIV     r0,r0,r1
        ADD      r0,r0,#5
        UXTH     r4,r0
        LDR      r0,|L1.428|
        LDR      r0,[r0,r10,LSL #2]
        LSR      r0,r0,#6
        MOV      r2,#0x73
        MUL      r0,r0,r2
        MOV      r2,#5
        ADD      r0,r2,r0,LSL #1
        UBFX     r1,r0,#10,#16
        MOV      r2,#0xffff
        MOV      r0,r4
        BL       LCD_SetPoint
        LDR      r0,|L1.428|
        LDR      r0,[r0,r10,LSL #2]
        ORR      r0,r0,#0x10000
        LDR      r1,|L1.428|
        STR      r0,[r1,r10,LSL #2]
        ADD      r0,r10,#1
        UXTH     r10,r0
|L1.364|
        LDR      r0,|L1.408|
        LDR      r0,[r0,#0]  ; num_samples_cycle
        CMP      r10,r0
        BCC      |L1.186|
        ADD      sp,sp,#0x24
        POP      {r4-r11,pc}
        ENDP

        DCW      0x0000
|L1.380|
        DCD      0x4002c000
|L1.384|
        DCD      0x4008c000
|L1.388|
        DCD      0x400fc1a8
|L1.392|
        DCD      0x400fc000
|L1.396|
        DCD      DAC_frecuency
|L1.400|
        DCD      frecuency_sound
|L1.404|
        DCD      samples_per_cicle
|L1.408|
        DCD      num_samples_cycle
|L1.412|
        DCD      0x000f4240
|L1.416|
        DCD      0x4d12d84a
|L1.420|
        DCD      0x401921fb
|L1.424|
        DCD      0x407ff000
|L1.428|
        DCD      buffer_DAC

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

buffer_DAC
        %        2000
||cad||
        %        10

        AREA ||.constdata||, DATA, READONLY, ALIGN=0

muelle
        DCB      0x00,0x00
click_audio
        DCB      0x00,0x00

        AREA ||.data||, DATA, ALIGN=2

time_DAC
        DCD      0x00000000
DAC_frecuency
        DCD      0x00000001
frecuency_sound
        DCD      0x00000001
num_samples_cycle
        DCD      0x00000064
samples_per_cicle
        DCD      0x00000064
Pulses_DAC
        DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "DAC\\dac.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_dac_c_time_DAC____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_dac_c_time_DAC____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_dac_c_time_DAC____REVSH|
#line 128
|__asm___5_dac_c_time_DAC____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT DACInit [CODE]
        EXPORT set_sound [CODE]
        EXPORT set_samples_cycle [CODE]
        EXPORT buffer_DAC [DATA,SIZE=2000]
        EXPORT ||cad|| [DATA,SIZE=10]
        EXPORT muelle [DATA,SIZE=2]
        EXPORT click_audio [DATA,SIZE=2]
        EXPORT time_DAC [DATA,SIZE=4]
        EXPORT DAC_frecuency [DATA,SIZE=4]
        EXPORT frecuency_sound [DATA,SIZE=4]
        EXPORT num_samples_cycle [DATA,SIZE=4]
        EXPORT samples_per_cicle [DATA,SIZE=4]
        EXPORT Pulses_DAC [DATA,SIZE=4]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT periodic_signal_us [CODE]
        IMPORT LCD_Clear [CODE]
        IMPORT __aeabi_ui2f [CODE]
        IMPORT __aeabi_fdiv [CODE]
        IMPORT __aeabi_f2d [CODE]
        IMPORT __aeabi_dmul [CODE]
        IMPORT ||sin|| [CODE]
        IMPORT __aeabi_dadd [CODE]
        IMPORT __aeabi_d2uiz [CODE]
        IMPORT LCD_SetPoint [CODE]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
