; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--debug -c --asm -oov7670_photo.o --depend=ov7670_photo.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=ov7670_photo.crf OV7670\OV7670_photo.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

photo_frame_RGB565 PROC
        PUSH     {r1-r7,lr}
        MOV      r4,#0
        MOV      r6,r4
        MOV      r5,r4
        MOV      r1,r4
        MOV      r0,r1
        BL       LCD_SetCursor
        LDR      r0,|L1.920|
        LDRH     r0,[r0,#0]  ; try_QCIF_H
        SUBS     r0,r0,#1
        UXTH     r3,r0
        LDR      r0,|L1.924|
        LDRH     r0,[r0,#0]  ; try_QCIF_W
        SUBS     r0,r0,#1
        UXTH     r2,r0
        MOVS     r1,#0
        MOV      r0,r1
        BL       Window
        LDR      r0,|L1.928|
        LDR      r0,[r0,#0x10]
        BIC      r0,r0,#0x20000000
        LDR      r1,|L1.928|
        STR      r0,[r1,#0x10]
        MOV      r0,r1
        LDR      r0,[r0,#0x10]
        BIC      r0,r0,#0x40000000
        STR      r0,[r1,#0x10]
        MOV      r0,r1
        LDR      r0,[r0,#0x10]
        BIC      r0,r0,#0x1000000
        STR      r0,[r1,#0x10]
        MOV      r0,r1
        LDR      r0,[r0,#0x1c]
        ORR      r0,r0,#0x20000000
        STR      r0,[r1,#0x1c]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x1c]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x1c]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x1c]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x1c]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x20000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x10]
        ORR      r0,r0,#0x20000000
        STR      r0,[r1,#0x10]
        MOV      r0,r1
        LDR      r0,[r0,#0x10]
        ORR      r0,r0,#0x40000000
        STR      r0,[r1,#0x10]
        LDR      r0,|L1.932|
        LDR      r0,[r0,#0]  ; fps_aux
        ADD      r0,r0,#1
        LDR      r1,|L1.932|
        STR      r0,[r1,#0]  ; fps_aux
        LDR      r0,|L1.936|
        LDRB     r0,[r0,#0]  ; take_picture
        CMP      r0,#1
        BNE      |L1.372|
        LDR      r0,|L1.928|
        LDR      r0,[r0,#0x10]
        BIC      r0,r0,#0x40000000
        LDR      r1,|L1.928|
        STR      r0,[r1,#0x10]
        MOV      r0,r1
        LDR      r0,[r0,#0x1c]
        ORR      r0,r0,#0x40000000
        STR      r0,[r1,#0x1c]
        MOV      r0,r1
        LDR      r0,[r0,#0x10]
        ORR      r0,r0,#0x40000000
        STR      r0,[r1,#0x10]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x1c]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x1c]
        MOV      r0,#0
        LDR      r1,|L1.936|
        STRB     r0,[r1,#0]
        ADR      r0,|L1.940|
        BL       tx_cadena_UART0
        ADR      r0,|L1.964|
        BL       tx_cadena_UART0
        B        |L1.350|
|L1.258|
        LDR      r0,|L1.928|
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        LDR      r1,|L1.928|
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x34]
        UBFX     r5,r0,#18,#8
        ADD      r1,sp,#4
        MOV      r0,r5
        BL       conversor_HexaS
        ADD      r0,sp,#4
        BL       tx_cadena_UART0
        LDR      r0,|L1.928|
        LDR      r0,[r0,#0x1c]
        ORR      r0,r0,#0x1000000
        LDR      r1,|L1.928|
        STR      r0,[r1,#0x1c]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x34]
        UBFX     r5,r0,#18,#8
        MOV      r0,r1
        LDR      r0,[r0,#0x1c]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x1c]
        ADD      r1,sp,#4
        MOV      r0,r5
        BL       conversor_HexaS
        ADD      r0,sp,#4
        BL       tx_cadena_UART0
        ADD      r4,r4,#1
|L1.350|
        LDR      r0,|L1.920|
        LDRH     r0,[r0,#0]  ; try_QCIF_H
        LDR      r1,|L1.924|
        LDRH     r1,[r1,#0]  ; try_QCIF_W
        MULS     r0,r1,r0
        CMP      r0,r4
        BHI      |L1.258|
        ADR      r0,|L1.996|
        BL       tx_cadena_UART0
        B        |L1.872|
|L1.372|
        LDR      r0,|L1.1004|
        LDRB     r0,[r0,#0]  ; show_picture
        CMP      r0,#1
        BNE      |L1.514|
        B        |L1.472|
|L1.382|
        MOV      r4,#0
        B        |L1.460|
|L1.388|
        MOV      r0,#0x100
        LDR      r1,|L1.928|
        STR      r0,[r1,#0x5c]
        MOV      r0,#0x28000000
        STR      r0,[r1,#0x3c]
        MOV      r0,#0x22
        STR      r0,[r1,#0x54]
        MOV      r0,#0
        STR      r0,[r1,#0x14]
        MOV      r0,#0x10000000
        STR      r0,[r1,#0x3c]
        STR      r0,[r1,#0x38]
        MOV      r0,#0x100
        STR      r0,[r1,#0x5c]
        MOV      r0,#0x8000000
        STR      r0,[r1,#0x38]
        UXTB     r0,r5
        STR      r0,[r1,#0x54]
        MOV      r0,#0x7f8000
        AND      r0,r0,r5,LSL #7
        STR      r0,[r1,#0x14]
        MOV      r0,#0x10000000
        STR      r0,[r1,#0x3c]
        STR      r0,[r1,#0x38]
        ADD      r4,r4,#1
|L1.460|
        LDR      r0,|L1.924|
        LDRH     r0,[r0,#0]  ; try_QCIF_W
        CMP      r4,r0
        BCC      |L1.388|
        ADD      r6,r6,#1
|L1.472|
        LDR      r0,|L1.920|
        LDRH     r0,[r0,#0]  ; try_QCIF_H
        CMP      r6,r0
        BCC      |L1.382|
        LDR      r0,|L1.928|
        LDR      r0,[r0,#0x10]
        BIC      r0,r0,#0x40000000
        LDR      r1,|L1.928|
        STR      r0,[r1,#0x10]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x40000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x10]
        ORR      r0,r0,#0x40000000
        STR      r0,[r1,#0x10]
        B        |L1.872|
|L1.514|
        B        |L1.862|
|L1.516|
        MOV      r4,#0
        B        |L1.840|
|L1.522|
        LDR      r0,|L1.928|
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        LDR      r1,|L1.928|
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x34]
        UBFX     r0,r0,#18,#8
        LSL      r5,r0,#8
        MOV      r0,r1
        LDR      r0,[r0,#0x1c]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x1c]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x34]
        UBFX     r0,r0,#18,#8
        ORR      r5,r0,r5
        MOV      r0,#0x100
        STR      r0,[r1,#0x5c]
        MOV      r0,#0x28000000
        STR      r0,[r1,#0x3c]
        MOV      r0,#0x22
        STR      r0,[r1,#0x54]
        MOV      r0,#0
        STR      r0,[r1,#0x14]
        MOV      r0,#0x10000000
        STR      r0,[r1,#0x3c]
        STR      r0,[r1,#0x38]
        MOV      r0,#0x100
        STR      r0,[r1,#0x5c]
        MOV      r0,#0x8000000
        STR      r0,[r1,#0x38]
        UXTB     r0,r5
        STR      r0,[r1,#0x54]
        MOV      r0,#0x7f8000
        AND      r0,r0,r5,LSL #7
        STR      r0,[r1,#0x14]
        MOV      r0,#0x10000000
        STR      r0,[r1,#0x3c]
        STR      r0,[r1,#0x38]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x34]
        MOV      r1,#0x7f8000
        AND      r0,r1,r0,LSR #3
        LDR      r1,|L1.928|
        STR      r0,[r1,#0x14]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x34]
        UBFX     r0,r0,#18,#8
        STR      r0,[r1,#0x54]
        MOV      r0,r1
        LDR      r0,[r0,#0x1c]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x1c]
        MOV      r0,#0x10000000
        STR      r0,[r1,#0x3c]
        STR      r0,[r1,#0x38]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x34]
        MOV      r1,#0x7f8000
        AND      r0,r1,r0,LSR #3
        LDR      r1,|L1.928|
        STR      r0,[r1,#0x14]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x34]
        UBFX     r0,r0,#18,#8
        STR      r0,[r1,#0x54]
        MOV      r0,r1
        LDR      r0,[r0,#0x1c]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x1c]
        MOV      r0,#0x10000000
        STR      r0,[r1,#0x3c]
        STR      r0,[r1,#0x38]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x34]
        MOV      r1,#0x7f8000
        AND      r0,r1,r0,LSR #3
        LDR      r1,|L1.928|
        STR      r0,[r1,#0x14]
        MOV      r0,r1
        LDR      r0,[r0,#0x18]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x34]
        UBFX     r0,r0,#18,#8
        STR      r0,[r1,#0x54]
        MOV      r0,r1
        LDR      r0,[r0,#0x1c]
        ORR      r0,r0,#0x1000000
        STR      r0,[r1,#0x1c]
        MOV      r0,#0x10000000
        STR      r0,[r1,#0x3c]
        STR      r0,[r1,#0x38]
        ADD      r4,r4,#1
|L1.840|
        LDR      r1,|L1.924|
        LDRH     r0,[r1,#0]  ; try_QCIF_W
        ASRS     r1,r0,#31
        ADD      r1,r0,r1,LSR #30
        CMP      r4,r1,ASR #2
        BCC      |L1.522|
        ADD      r6,r6,#1
|L1.862|
        LDR      r0,|L1.920|
        LDRH     r0,[r0,#0]  ; try_QCIF_H
        CMP      r6,r0
        BCC      |L1.516|
|L1.872|
        BL       get_timer1
        LDR      r1,|L1.1008|
        LDR      r1,[r1,#0]  ; frame_read_delay_us
        SUB      r0,r0,r1
        LDR      r1,|L1.1008|
        STR      r0,[r1,#0]  ; frame_read_delay_us
        LDR      r1,|L1.1012|
        LDR      r0,|L1.1008|
        LDR      r0,[r0,#0]  ; frame_read_delay_us
        BL       conversor_IaS
        MOV      r0,#0xffff
        MOVS     r3,#0
        LDR      r2,|L1.1012|
        MOVS     r1,#0xc8
        STR      r0,[sp,#0]
        MOVS     r0,#0x1e
        BL       GUI_Text
        POP      {r1-r7,pc}
        ENDP

        DCW      0x0000
|L1.920|
        DCD      try_QCIF_H
|L1.924|
        DCD      try_QCIF_W
|L1.928|
        DCD      0x2009c000
|L1.932|
        DCD      fps_aux
|L1.936|
        DCD      take_picture
|L1.940|
        DCB      "#include <LPC17xx.h>\n\r",0
        DCB      0
|L1.964|
        DCB      "const uint8_t nos[38400] = {\n\r",0
        DCB      0
|L1.996|
        DCB      "\n\r }; ",0
        DCB      0
|L1.1004|
        DCD      show_picture
|L1.1008|
        DCD      frame_read_delay_us
|L1.1012|
        DCD      delay_read

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.data||, DATA, ALIGN=1

try_QCIF_H
        DCW      0x00f0
try_QCIF_W
        DCW      0x0140
show_picture
        DCB      0x00
take_picture
        DCB      0x00

;*** Start embedded assembler ***

#line 1 "OV7670\\OV7670_photo.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_OV7670_photo_c_ab512215____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_OV7670_photo_c_ab512215____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_OV7670_photo_c_ab512215____REVSH|
#line 128
|__asm___14_OV7670_photo_c_ab512215____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT photo_frame_RGB565 [CODE]
        EXPORT try_QCIF_H [DATA,SIZE=2]
        EXPORT try_QCIF_W [DATA,SIZE=2]
        EXPORT show_picture [DATA,SIZE=1]
        EXPORT take_picture [DATA,SIZE=1]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT LCD_SetCursor [CODE]
        IMPORT Window [CODE]
        IMPORT tx_cadena_UART0 [CODE]
        IMPORT conversor_HexaS [CODE]
        IMPORT get_timer1 [CODE]
        IMPORT conversor_IaS [CODE]
        IMPORT GUI_Text [CODE]
        IMPORT fps_aux [DATA]
        IMPORT frame_read_delay_us [DATA]
        IMPORT delay_read [DATA]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
