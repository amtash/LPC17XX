; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--debug -c --asm -ocalibration.o --depend=calibration.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=calibration.crf OV7670\calibration.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

getOV7670_fps PROC
        PUSH     {r4,lr}
        MOVS     r0,#0x6b
        BL       ov7670_read
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        CBNZ     r0,|L1.20|
        MOV      r4,#1
        B        |L1.60|
|L1.20|
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        CMP      r0,#0x40
        BNE      |L1.34|
        MOV      r4,#4
        B        |L1.60|
|L1.34|
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        CMP      r0,#0x80
        BNE      |L1.48|
        MOV      r4,#6
        B        |L1.60|
|L1.48|
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        CMP      r0,#0xc0
        BNE      |L1.60|
        MOV      r4,#8
|L1.60|
        MOVS     r0,#0x11
        BL       ov7670_read
        RSB      r1,r4,r4,LSL #4
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        ADD      r0,r0,#1
        SDIV     r0,r1,r0
        LDR      r1,|L1.1032|
        STRB     r0,[r1,#0]
        POP      {r4,pc}
        ENDP

getOV7670_RGBgain PROC
        PUSH     {r4,lr}
        MOVS     r0,#2
        BL       ov7670_read
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        LDR      r1,|L1.1036|
        STRB     r0,[r1,#0]
        MOVS     r0,#0x6a
        BL       ov7670_read
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        LDR      r1,|L1.1040|
        STRB     r0,[r1,#0]
        MOVS     r0,#1
        BL       ov7670_read
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        LDR      r1,|L1.1044|
        STRB     r0,[r1,#0]
        POP      {r4,pc}
        ENDP

getOV7670_BriConLum PROC
        PUSH     {r4,lr}
        MOVS     r0,#0x55
        BL       ov7670_read
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        LDR      r1,|L1.1048|
        STRB     r0,[r1,#0]
        MOVS     r0,#0x56
        BL       ov7670_read
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        LDR      r1,|L1.1052|
        STRB     r0,[r1,#0]
        MOVS     r0,#0
        BL       ov7670_read
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        LDR      r1,|L1.1056|
        STRH     r0,[r1,#0]
        POP      {r4,pc}
        ENDP

OV7670_BriConLum PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r7,r1
        MOV      r4,r2
        MOV      r5,r3
        MOV      r1,r6
        MOV      r0,#0x55
        BL       ov7670_set
        MOV      r1,r7
        MOVS     r0,#0x56
        BL       ov7670_set
        CBNZ     r5,|L1.242|
        MOVS     r0,#0x13
        BL       ov7670_read
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        BIC      r1,r0,#4
        MOVS     r0,#0x13
        BL       ov7670_set
        UXTB     r1,r4
        MOVS     r0,#0
        BL       ov7670_set
        B        |L1.276|
|L1.242|
        CMP      r5,#1
        BNE      |L1.276|
        MOVS     r0,#0x13
        BL       ov7670_read
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        ORR      r1,r0,#4
        MOVS     r0,#0x13
        BL       ov7670_set
        LSLS     r0,r4,#29
        LSRS     r1,r0,#25
        MOVS     r0,#0x14
        BL       ov7670_set
|L1.276|
        POP      {r4-r8,pc}
        ENDP

OV7670_RGBgain PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r6,r1
        MOV      r5,r2
        MOV      r1,r4
        MOV      r0,#2
        BL       ov7670_set
        MOV      r1,r6
        MOVS     r0,#0x6a
        BL       ov7670_set
        MOV      r1,r5
        MOVS     r0,#1
        BL       ov7670_set
        LDR      r0,|L1.1036|
        STRB     r4,[r0,#0]
        LDR      r0,|L1.1040|
        STRB     r6,[r0,#0]
        LDR      r0,|L1.1044|
        STRB     r5,[r0,#0]
        POP      {r4-r6,pc}
        ENDP

OV7670_RGBgain_Range PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r7,r1
        MOV      r5,r2
        MOV      r6,r3
        MOV      r1,r4
        MOV      r0,#0x60
        BL       ov7670_set
        MOV      r1,r7
        MOVS     r0,#0x61
        BL       ov7670_set
        MOV      r1,r5
        MOVS     r0,#0x5f
        BL       ov7670_set
        MOV      r1,r6
        MOVS     r0,#0x69
        BL       ov7670_set
        POP      {r4-r8,pc}
        ENDP

OV7670_AWBmode PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CBNZ     r4,|L1.406|
        MOVS     r0,#0x13
        BL       ov7670_read
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        BIC      r1,r0,#2
        MOVS     r0,#0x13
        BL       ov7670_set
        B        |L1.472|
|L1.406|
        CMP      r4,#1
        BNE      |L1.440|
        MOVS     r0,#0x13
        BL       ov7670_read
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        ORR      r1,r0,#2
        MOVS     r0,#0x13
        BL       ov7670_set
        MOVS     r1,#0xd
        MOVS     r0,#0x6f
        BL       ov7670_set
        B        |L1.472|
|L1.440|
        CMP      r4,#2
        BNE      |L1.472|
        MOVS     r0,#0x13
        BL       ov7670_read
        LDR      r0,|L1.1028|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        ORR      r1,r0,#2
        MOVS     r0,#0x13
        BL       ov7670_set
        MOVS     r1,#0xc
        MOVS     r0,#0x6f
        BL       ov7670_set
|L1.472|
        POP      {r4,pc}
        ENDP

AWBC_control PROC
        PUSH     {r4,lr}
        MOVS     r1,#0x14
        MOVS     r0,#0x43
        BL       ov7670_set
        MOVS     r1,#0xf0
        MOVS     r0,#0x44
        BL       ov7670_set
        MOVS     r1,#0x34
        MOVS     r0,#0x45
        BL       ov7670_set
        MOVS     r1,#0x58
        MOVS     r0,#0x46
        BL       ov7670_set
        MOVS     r1,#0x28
        MOVS     r0,#0x47
        BL       ov7670_set
        MOVS     r1,#0x3a
        MOVS     r0,#0x48
        BL       ov7670_set
        MOVS     r1,#0x88
        MOVS     r0,#0x59
        BL       ov7670_set
        MOVS     r1,#0x88
        MOVS     r0,#0x5a
        BL       ov7670_set
        MOVS     r1,#0x44
        MOVS     r0,#0x5b
        BL       ov7670_set
        MOVS     r1,#0x67
        MOVS     r0,#0x5c
        BL       ov7670_set
        MOVS     r1,#0x49
        MOVS     r0,#0x5d
        BL       ov7670_set
        MOVS     r1,#0xe
        MOVS     r0,#0x5e
        BL       ov7670_set
        POP      {r4,pc}
        ENDP

set_Umbral PROC
        LDR      r1,|L1.1060|
        STRB     r0,[r1,#0]
        BX       lr
        ENDP

OV7670_FPS PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        LDR      r0,|L1.1032|
        STRB     r4,[r0,#0]
        CMP      r4,#1
        BNE      |L1.596|
        MOVS     r0,#1
        B        |L1.598|
|L1.596|
        MOVS     r0,#0
|L1.598|
        CMP      r4,#3
        BNE      |L1.606|
        MOVS     r1,#1
        B        |L1.608|
|L1.606|
        MOVS     r1,#0
|L1.608|
        ORRS     r0,r0,r1
        CMP      r4,#5
        BNE      |L1.618|
        MOVS     r1,#1
        B        |L1.620|
|L1.618|
        MOVS     r1,#0
|L1.620|
        ORRS     r0,r0,r1
        CMP      r4,#0xf
        BNE      |L1.630|
        MOVS     r1,#1
        B        |L1.632|
|L1.630|
        MOVS     r1,#0
|L1.632|
        ORRS     r0,r0,r1
        CMP      r4,#7
        BNE      |L1.642|
        MOVS     r1,#1
        B        |L1.644|
|L1.642|
        MOVS     r1,#0
|L1.644|
        ORRS     r0,r0,r1
        BEQ      |L1.676|
        MOVS     r1,#0
        MOVS     r0,#0x11
        BL       ov7670_set
        MOVS     r1,#0
        MOVS     r0,#0x6b
        BL       ov7670_set
        MOV      r0,#0xf
        SDIV     r0,r0,r4
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
|L1.676|
        CMP      r4,#2
        BNE      |L1.684|
        MOVS     r0,#1
        B        |L1.686|
|L1.684|
        MOVS     r0,#0
|L1.686|
        CMP      r4,#0xa
        BNE      |L1.694|
        MOVS     r1,#1
        B        |L1.696|
|L1.694|
        MOVS     r1,#0
|L1.696|
        ORRS     r0,r0,r1
        CMP      r4,#0x1e
        BNE      |L1.706|
        MOVS     r1,#1
        B        |L1.708|
|L1.706|
        MOVS     r1,#0
|L1.708|
        ORRS     r0,r0,r1
        BEQ      |L1.740|
        MOVS     r1,#1
        MOVS     r0,#0x11
        BL       ov7670_set
        MOVS     r1,#0x40
        MOVS     r0,#0x6b
        BL       ov7670_set
        MOV      r0,#0x1e
        SDIV     r0,r0,r4
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
|L1.740|
        CMP      r4,#0xc
        BNE      |L1.768|
        MOVS     r1,#4
        MOVS     r0,#0x11
        BL       ov7670_set
        MOVS     r1,#0x40
        MOVS     r0,#0x6b
        BL       ov7670_set
        MOV      r0,#1
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
|L1.768|
        CMP      r4,#0x14
        BNE      |L1.796|
        MOVS     r1,#2
        MOVS     r0,#0x11
        BL       ov7670_set
        MOVS     r1,#0x40
        MOVS     r0,#0x6b
        BL       ov7670_set
        MOV      r0,#1
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
|L1.796|
        CMP      r4,#0x1e
        BNE      |L1.824|
        MOVS     r1,#1
        MOVS     r0,#0x11
        BL       ov7670_set
        MOVS     r1,#0x40
        MOVS     r0,#0x6b
        BL       ov7670_set
        MOV      r0,#1
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
|L1.824|
        CMP      r4,#0xd
        BNE      |L1.852|
        MOVS     r1,#6
        MOVS     r0,#0x11
        BL       ov7670_set
        MOVS     r1,#0x80
        MOVS     r0,#0x6b
        BL       ov7670_set
        MOV      r0,#1
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
|L1.852|
        CMP      r4,#0x16
        BNE      |L1.880|
        MOVS     r1,#3
        MOVS     r0,#0x11
        BL       ov7670_set
        MOVS     r1,#0x80
        MOVS     r0,#0x6b
        BL       ov7670_set
        MOV      r0,#1
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
|L1.880|
        CMP      r4,#0x18
        BNE      |L1.908|
        MOVS     r1,#4
        MOVS     r0,#0x11
        BL       ov7670_set
        MOVS     r1,#0xc0
        MOVS     r0,#0x6b
        BL       ov7670_set
        MOV      r0,#1
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
|L1.908|
        CMP      r4,#0x28
        BNE      |L1.936|
        MOVS     r1,#2
        MOVS     r0,#0x11
        BL       ov7670_set
        MOVS     r1,#0xc0
        MOVS     r0,#0x6b
        BL       ov7670_set
        MOV      r0,#1
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
|L1.936|
        CMP      r4,#0x3c
        BNE      |L1.964|
        MOVS     r1,#0
        MOVS     r0,#0x11
        BL       ov7670_set
        MOVS     r1,#0x40
        MOVS     r0,#0x6b
        BL       ov7670_set
        MOV      r0,#1
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
|L1.964|
        POP      {r4,pc}
        ENDP

reset_OV7670 PROC
        PUSH     {r4,lr}
        MOV      r0,#0
        LDR      r1,|L1.1068|
        STR      r0,[r1,#0]  ; pass
        MOV      r1,#0x80
        MOV      r0,#0x4f
        BL       ov7670_set
        MOVS     r1,#0x80
        MOVS     r0,#0x50
        BL       ov7670_set
        MOVS     r1,#0
        MOVS     r0,#0x51
        BL       ov7670_set
        MOVS     r1,#0x22
        MOVS     r0,#0x52
        BL       ov7670_set
        MOVS     r1,#0x5e
        MOVS     r0,#0x53
        BL       ov7670_set
        MOVS     r1,#0x80
        MOVS     r0,#0x54
        B        |L1.1072|
        DCW      0x0000
|L1.1028|
        DCD      I2CSlaveBuffer
|L1.1032|
        DCD      OV7670fps
|L1.1036|
        DCD      OV7670R_gain
|L1.1040|
        DCD      OV7670G_gain
|L1.1044|
        DCD      OV7670B_gain
|L1.1048|
        DCD      OV7670bright
|L1.1052|
        DCD      OV7670contrast
|L1.1056|
        DCD      OV7670luminis
|L1.1060|
        DCD      umbral
|L1.1064|
        DCD      fps_divider
|L1.1068|
        DCD      pass
|L1.1072|
        BL       ov7670_set
        MOVS     r1,#0x40
        MOVS     r0,#0x56
        BL       ov7670_set
        MOVS     r1,#0x9e
        MOVS     r0,#0x58
        BL       ov7670_set
        MOVS     r1,#0x88
        MOVS     r0,#0x59
        BL       ov7670_set
        MOVS     r1,#0x88
        MOVS     r0,#0x5a
        BL       ov7670_set
        MOVS     r1,#0x44
        MOVS     r0,#0x5b
        BL       ov7670_set
        MOVS     r1,#0x67
        MOVS     r0,#0x5c
        BL       ov7670_set
        MOVS     r1,#0x49
        MOVS     r0,#0x5d
        BL       ov7670_set
        MOVS     r1,#0xe
        MOVS     r0,#0x5e
        BL       ov7670_set
        MOVS     r1,#0
        MOVS     r0,#0x69
        BL       ov7670_set
        MOVS     r1,#0x40
        MOVS     r0,#0x6a
        BL       ov7670_set
        MOVS     r1,#0xa
        MOVS     r0,#0x6c
        BL       ov7670_set
        MOVS     r1,#0x55
        MOVS     r0,#0x6d
        BL       ov7670_set
        MOVS     r1,#0x11
        MOVS     r0,#0x6e
        BL       ov7670_set
        MOVS     r1,#0x9f
        MOVS     r0,#0x6f
        BL       ov7670_set
        MOVS     r0,#1
        BL       OV7670_AWBmode
        BL       getOV7670_RGBgain
        BL       getOV7670_BriConLum
        MOVS     r0,#0x14
        BL       OV7670_FPS
        MOV      r0,#1
        LDR      r1,|L1.1644|
        STR      r0,[r1,#0]  ; pass
        POP      {r4,pc}
        ENDP

resolution PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        LDR      r0,|L1.1648|
        STRB     r4,[r0,#0]
        CMP      r4,#1
        BLT      |L1.1350|
        CMP      r4,#3
        BGT      |L1.1350|
        ADD      r0,r4,#0x18
        UXTB     r1,r0
        MOVS     r0,#0x3e
        BL       ov7670_set
        ADD      r0,r4,r4,LSL #4
        UXTB     r1,r0
        MOVS     r0,#0x72
        BL       ov7670_set
        ADD      r0,r4,#0xf0
        UXTB     r1,r0
        MOVS     r0,#0x73
        BL       ov7670_set
        MOV      r0,#1
        LSL      r0,r0,r4
        MOV      r1,#0x280
        SDIV     r0,r1,r0
        LDR      r1,|L1.1652|
        STRH     r0,[r1,#0]
        MOV      r0,#1
        LSL      r0,r0,r4
        MOV      r1,#0x1e0
        SDIV     r0,r1,r0
        LDR      r1,|L1.1656|
        STRH     r0,[r1,#0]
        ADD      r1,r4,#1
        ADD      r1,r1,r1,LSL #2
        LSL      r1,r1,#25
        LSR      r0,r1,#24
        BL       OV7670_FPS
        MOVS     r1,#2
        MOVS     r0,#0xa2
        BL       ov7670_set
        CMP      r4,#3
        BNE      |L1.1350|
        MOVS     r1,#0
        MOVS     r0,#0xa2
        BL       ov7670_set
|L1.1350|
        POP      {r4,pc}
        ENDP

timing_resol PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        ADD      r0,r4,#0x18
        UXTB     r1,r0
        MOV      r0,#0x3e
        BL       ov7670_set
        ADD      r0,r5,#0xf0
        UXTB     r1,r0
        MOVS     r0,#0x73
        BL       ov7670_set
        MOV      r1,r6
        MOVS     r0,#0xa2
        BL       ov7670_set
        POP      {r4-r6,pc}
        ENDP

scaler PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        NOP      
        LDR      r0,|L1.1660|
        LDR      r0,[r0,#0]  ; num
        CMP      r0,#0x20
        BHI      |L1.1606|
        ADD      r0,r4,#0x20
        UXTB     r1,r0
        MOVS     r0,#0x70
        BL       ov7670_set
        ADD      r0,r5,#0x20
        UXTB     r1,r0
        MOVS     r0,#0x71
        BL       ov7670_set
        LDR      r0,|L1.1648|
        LDRB     r1,[r0,#0]  ; resol_type
        MOV      r0,#1
        LSL      r0,r0,r1
        MOV      r1,#0x280
        SDIV     r0,r1,r0
        LSL      r1,r0,#5
        ADD      r0,r4,#0x20
        SDIV     r0,r1,r0
        LDR      r1,|L1.1652|
        STRH     r0,[r1,#0]
        LDR      r0,|L1.1648|
        LDRB     r1,[r0,#0]  ; resol_type
        MOV      r0,#1
        LSL      r0,r0,r1
        MOV      r1,#0x1e0
        SDIV     r0,r1,r0
        LSL      r1,r0,#5
        ADD      r0,r5,#0x20
        SDIV     r0,r1,r0
        LDR      r1,|L1.1656|
        STRH     r0,[r1,#0]
        CMP      r4,#3
        BLE      |L1.1598|
        LDR      r0,|L1.1648|
        LDRB     r1,[r0,#0]  ; resol_type
        MOVS     r0,#1
        LSLS     r0,r0,r1
        MOV      r1,#0x280
        SDIV     r0,r1,r0
        LDR      r1,|L1.1652|
        LDRH     r1,[r1,#0]  ; try_QCIF_W
        SUBS     r2,r0,r1
        RSB      r0,r4,#8
        LSLS     r3,r0,#2
        LDR      r0,|L1.1648|
        LDRB     r0,[r0,#0]  ; resol_type
        SUBS     r0,r0,#1
        MOVS     r1,#1
        LSLS     r1,r1,r0
        SDIV     r0,r3,r1
        ADDS     r1,r2,r0
        SUB      r7,r4,#8
        ASRS     r0,r7,#31
        ADD      r0,r7,r0,LSR #29
        ASRS     r2,r0,#3
        MOV      r6,r7
        ASRS     r0,r6,#31
        ADD      r0,r6,r0,LSR #29
        ASRS     r0,r0,#3
        MLA      r0,r2,r0,r1
        AND      r8,r0,#0xff
        MOV      r1,r8
        MOVS     r0,#0xa2
        BL       ov7670_set
        B        |L1.1606|
|L1.1598|
        MOVS     r1,#2
        MOVS     r0,#0xa2
        BL       ov7670_set
|L1.1606|
        POP      {r4-r8,pc}
        ENDP

OV7670_mirror PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CMP      r4,#4
        BGE      |L1.1640|
        MOVS     r0,#0x1e
        BL       ov7670_read
        LDR      r0,|L1.1664|
        LDRB     r0,[r0,#0]  ; I2CSlaveBuffer
        EOR      r0,r0,r4,LSL #4
        UXTB     r1,r0
        MOVS     r0,#0x1e
        BL       ov7670_set
|L1.1640|
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L1.1644|
        DCD      pass
|L1.1648|
        DCD      resol_type
|L1.1652|
        DCD      try_QCIF_W
|L1.1656|
        DCD      try_QCIF_H
|L1.1660|
        DCD      num
|L1.1664|
        DCD      I2CSlaveBuffer

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=0

aux_lum
        %        10

        AREA ||.data||, DATA, ALIGN=1

MAX_X
        DCW      0x0140
MAX_Y
        DCW      0x00f0
text_mode
        DCB      0x00
OV7670contrast
        DCB      0x40
OV7670bright
        DCB      0x00,0x00
OV7670luminis
        DCW      0x0000
OV7670R_gain
        DCB      0x00
OV7670G_gain
        DCB      0x00
OV7670B_gain
        DCB      0x00
OV7670fps
        DCB      0x14
resol_type
        DCB      0x01

;*** Start embedded assembler ***

#line 1 "OV7670\\calibration.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_calibration_c_MAX_X____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_calibration_c_MAX_X____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_calibration_c_MAX_X____REVSH|
#line 128
|__asm___13_calibration_c_MAX_X____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT getOV7670_fps [CODE]
        EXPORT getOV7670_RGBgain [CODE]
        EXPORT getOV7670_BriConLum [CODE]
        EXPORT OV7670_BriConLum [CODE]
        EXPORT OV7670_RGBgain [CODE]
        EXPORT OV7670_RGBgain_Range [CODE]
        EXPORT OV7670_AWBmode [CODE]
        EXPORT AWBC_control [CODE]
        EXPORT set_Umbral [CODE]
        EXPORT OV7670_FPS [CODE]
        EXPORT reset_OV7670 [CODE]
        EXPORT resolution [CODE]
        EXPORT timing_resol [CODE]
        EXPORT scaler [CODE]
        EXPORT OV7670_mirror [CODE]
        EXPORT aux_lum [DATA,SIZE=10]
        EXPORT MAX_X [DATA,SIZE=2]
        EXPORT MAX_Y [DATA,SIZE=2]
        EXPORT text_mode [DATA,SIZE=1]
        EXPORT OV7670contrast [DATA,SIZE=1]
        EXPORT OV7670bright [DATA,SIZE=1]
        EXPORT OV7670luminis [DATA,SIZE=2]
        EXPORT OV7670R_gain [DATA,SIZE=1]
        EXPORT OV7670G_gain [DATA,SIZE=1]
        EXPORT OV7670B_gain [DATA,SIZE=1]
        EXPORT OV7670fps [DATA,SIZE=1]
        EXPORT resol_type [DATA,SIZE=1]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT ov7670_read [CODE]
        IMPORT I2CSlaveBuffer [DATA]
        IMPORT ov7670_set [CODE]
        IMPORT umbral [DATA]
        IMPORT fps_divider [DATA]
        IMPORT pass [DATA]
        IMPORT try_QCIF_W [DATA]
        IMPORT try_QCIF_H [DATA]
        IMPORT num [DATA]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
